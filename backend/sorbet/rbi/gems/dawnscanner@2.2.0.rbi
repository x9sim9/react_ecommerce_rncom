# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dawnscanner` gem.
# Please instead update this file by running `bin/tapioca gem dawnscanner`.

# This module handles security checks for RubyGems framework.
#
# source://dawnscanner//lib/dawn/core.rb#3
module Dawn; end

# source://dawnscanner//lib/dawn/version.rb#4
Dawn::BUILD = T.let(T.unsafe(nil), String)

# source://dawnscanner//lib/dawn/version.rb#5
Dawn::COMMIT = T.let(T.unsafe(nil), String)

# source://dawnscanner//lib/dawn/cli/dawn_cli.rb#5
module Dawn::Cli; end

# source://dawnscanner//lib/dawn/cli/dawn_cli.rb#82
class Dawn::Cli::DawnCli < ::Thor
  # source://dawnscanner//lib/dawn/cli/dawn_cli.rb#90
  def __print_version; end

  # source://thor/1.3.1/lib/thor.rb#334
  def kb(*args); end

  # source://dawnscanner//lib/dawn/cli/dawn_cli.rb#108
  def scan(target); end
end

# This class is responsible for the "dawn kb" command and related
# subcommands.
#
# source://dawnscanner//lib/dawn/cli/dawn_cli.rb#8
class Dawn::Cli::Kb < ::Thor
  # source://dawnscanner//lib/dawn/cli/dawn_cli.rb#21
  def find(string); end

  def help(command = T.unsafe(nil), subcommand = T.unsafe(nil)); end

  # source://dawnscanner//lib/dawn/cli/dawn_cli.rb#14
  def init_globals; end

  # source://dawnscanner//lib/dawn/cli/dawn_cli.rb#28
  def lint; end

  # source://dawnscanner//lib/dawn/cli/dawn_cli.rb#63
  def list(gem_name, gem_version = T.unsafe(nil)); end

  # source://dawnscanner//lib/dawn/cli/dawn_cli.rb#45
  def status; end

  # source://dawnscanner//lib/dawn/cli/dawn_cli.rb#35
  def unpack; end
end

# source://dawnscanner//lib/dawn/core.rb#4
class Dawn::Core
  class << self
    # @raise [ArgumentError]
    #
    # source://dawnscanner//lib/dawn/core.rb#82
    def detect_mvc(target); end

    # source://dawnscanner//lib/dawn/core.rb#104
    def find_conf(create_if_none = T.unsafe(nil)); end

    # guess_mvc is very close to detect_mvc despite it accepts a
    # filename as input and it tries to guess the mvc framework used from the
    # gems it founds in Gemfile.lock without creating an engine.
    #
    # @raise [ArgumentError]
    #
    # source://dawnscanner//lib/dawn/core.rb#62
    def guess_mvc(gemfile_lock); end

    # TODO.20140326
    # All those methods must moved from here to Util class and a
    # Dawn::Core namespace must be created.
    #
    # source://dawnscanner//lib/dawn/core.rb#19
    def help; end

    # @return [Boolean]
    #
    # source://dawnscanner//lib/dawn/core.rb#100
    def is_good_target?(target); end

    # source://dawnscanner//lib/dawn/core.rb#140
    def read_conf(file = T.unsafe(nil)); end

    # source://dawnscanner//lib/dawn/core.rb#6
    def registry_db_folder; end

    # source://dawnscanner//lib/dawn/core.rb#9
    def registry_db_name; end

    # source://dawnscanner//lib/dawn/core.rb#12
    def sql_log_name; end
  end
end

# source://dawnscanner//lib/dawn/engine.rb#9
module Dawn::Engine
  # source://dawnscanner//lib/dawn/engine.rb#53
  def initialize(dir = T.unsafe(nil), name = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the value of attribute applied_checks.
  #
  # source://dawnscanner//lib/dawn/engine.rb#48
  def applied_checks; end

  # Security stuff applies here
  #
  # Public it applies a single security check given by its name
  #
  # name - the security check to be applied
  #
  # Examples
  #
  #   engine.apply("CVE-2013-1800")
  #   # => boolean
  #
  # Returns a true value if the security check was successfully applied or false
  # otherwise
  #
  # source://dawnscanner//lib/dawn/engine.rb#271
  def apply(name); end

  # source://dawnscanner//lib/dawn/engine.rb#296
  def apply_all(checks_to_be_skipped = T.unsafe(nil)); end

  # source://dawnscanner//lib/dawn/engine.rb#127
  def build_view_array(dir); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/engine.rb#215
  def can_apply?; end

  # Returns the value of attribute checks.
  #
  # source://dawnscanner//lib/dawn/engine.rb#21
  def checks; end

  # Returns the value of attribute connected_gems.
  #
  # source://dawnscanner//lib/dawn/engine.rb#20
  def connected_gems; end

  # Each controller will be a little bit more complex. Of course for
  # Sinatra, the controller filename will be the sole web application ruby
  # file.
  # {:filename=>"target/controllers/this_controller.rb", :actions=>[{:name=>"index", :method=>:get, :map=>"/"]}
  #
  # source://dawnscanner//lib/dawn/engine.rb#40
  def controllers; end

  # source://dawnscanner//lib/dawn/engine.rb#363
  def count_vulnerabilities; end

  # Creates the directory
  #
  # source://dawnscanner//lib/dawn/engine.rb#247
  def create_output_dir; end

  # Returns the value of attribute debug.
  #
  # source://dawnscanner//lib/dawn/engine.rb#46
  def debug; end

  # Sets the attribute debug
  #
  # @param value the value to set the attribute debug to.
  #
  # source://dawnscanner//lib/dawn/engine.rb#46
  def debug=(_arg0); end

  # source://dawnscanner//lib/dawn/engine.rb#139
  def detect_controllers; end

  # source://dawnscanner//lib/dawn/engine.rb#143
  def detect_models; end

  # source://dawnscanner//lib/dawn/engine.rb#117
  def detect_views; end

  # Returns the value of attribute engine_error.
  #
  # source://dawnscanner//lib/dawn/engine.rb#26
  def engine_error; end

  # source://dawnscanner//lib/dawn/engine.rb#120
  def error!; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/engine.rb#123
  def error?; end

  # source://dawnscanner//lib/dawn/engine.rb#345
  def find_vulnerability_by_name(name); end

  # This attribute is used when @name == "Gemfile.lock" to force the
  # loading of specific MVC checks
  #
  # source://dawnscanner//lib/dawn/engine.rb#17
  def force; end

  # Returns the value of attribute gemfile_lock.
  #
  # source://dawnscanner//lib/dawn/engine.rb#18
  def gemfile_lock; end

  # source://dawnscanner//lib/dawn/engine.rb#219
  def get_mvc_version; end

  # source://dawnscanner//lib/dawn/engine.rb#147
  def get_ruby_version; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/engine.rb#207
  def has_gemfile_lock?; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/engine.rb#359
  def has_reflected_xss?; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/engine.rb#333
  def is_applied?(name); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/engine.rb#211
  def is_good_mvc?; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/engine.rb#354
  def is_vulnerable_to?(name); end

  # source://dawnscanner//lib/dawn/engine.rb#175
  def load_knowledge_base(enabled_checks = T.unsafe(nil)); end

  # Returns the value of attribute mitigated_issues.
  #
  # source://dawnscanner//lib/dawn/engine.rb#23
  def mitigated_issues; end

  # Models I don't know right now. Let them initialized as Array... we
  # will see later
  #
  # source://dawnscanner//lib/dawn/engine.rb#44
  def models; end

  # Returns the value of attribute mvc_version.
  #
  # source://dawnscanner//lib/dawn/engine.rb#19
  def mvc_version; end

  # Returns the value of attribute name.
  #
  # source://dawnscanner//lib/dawn/engine.rb#12
  def name; end

  # Creates the directory name where dawnscanner results will be saved
  #
  # Examples
  #   engine.create_output_dir
  #   # => /Users/thesp0nge/dawnscanner/results/railsgoat/20151123
  #   # => /Users/thesp0nge/dawnscanner/results/railsgoat/20151123_1 (if
  #               previous directory name exists)
  #
  # source://dawnscanner//lib/dawn/engine.rb#234
  def output_dir; end

  # Returns the value of attribute output_dir_name.
  #
  # source://dawnscanner//lib/dawn/engine.rb#51
  def output_dir_name; end

  # Returns the value of attribute reflected_xss.
  #
  # source://dawnscanner//lib/dawn/engine.rb#29
  def reflected_xss; end

  # Returns the value of attribute ruby_version.
  #
  # source://dawnscanner//lib/dawn/engine.rb#24
  def ruby_version; end

  # Returns the value of attribute scan_start.
  #
  # source://dawnscanner//lib/dawn/engine.rb#13
  def scan_start; end

  # Returns the value of attribute scan_stop.
  #
  # source://dawnscanner//lib/dawn/engine.rb#14
  def scan_stop; end

  # source://dawnscanner//lib/dawn/engine.rb#329
  def scan_time; end

  # source://dawnscanner//lib/dawn/engine.rb#188
  def set_mvc_version; end

  # source://dawnscanner//lib/dawn/engine.rb#164
  def set_target(dir); end

  # Returns the value of attribute skipped_checks.
  #
  # source://dawnscanner//lib/dawn/engine.rb#49
  def skipped_checks; end

  # Returns the value of attribute stats.
  #
  # source://dawnscanner//lib/dawn/engine.rb#27
  def stats; end

  # Returns the value of attribute target.
  #
  # source://dawnscanner//lib/dawn/engine.rb#11
  def target; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/engine.rb#171
  def target_is_dir?; end

  # Each view will be something like {:filename=>"target/views/index.haml", :language=>:haml}
  #
  # source://dawnscanner//lib/dawn/engine.rb#34
  def views; end

  # Returns the value of attribute vulnerabilities.
  #
  # source://dawnscanner//lib/dawn/engine.rb#340
  def vulnerabilities; end

  private

  # source://dawnscanner//lib/dawn/engine.rb#382
  def _do_apply(check); end

  # source://dawnscanner//lib/dawn/engine.rb#372
  def get_rbenv_ruby_ver; end

  # source://dawnscanner//lib/dawn/engine.rb#377
  def get_rvm_ruby_ver; end
end

# source://dawnscanner//lib/dawn/gemfile_lock.rb#2
class Dawn::GemfileLock
  include ::Dawn::Engine

  # @return [GemfileLock] a new instance of GemfileLock
  #
  # source://dawnscanner//lib/dawn/gemfile_lock.rb#5
  def initialize(dir = T.unsafe(nil)); end
end

# source://dawnscanner//lib/dawn/kb/basic_check.rb#4
module Dawn::Kb; end

# source://dawnscanner//lib/dawn/kb/basic_check.rb#5
module Dawn::Kb::BasicCheck
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#88
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute applies.
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#15
  def applies; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#210
  def applies_to?(name); end

  # Returns the value of attribute aux_links.
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#19
  def aux_links; end

  # This is a flag for the security check family. Valid values are:
  #   + generic_check
  #   + code_quality
  #   + bulletin
  #   + code_style
  #   + owasp_ror_cheatsheet
  #   + owasp_top_10_n (where n is a number between 1 and 10)
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#54
  def check_family; end

  # This is a flag for the security check family. Valid values are:
  #   + generic_check
  #   + code_quality
  #   + bulletin
  #   + code_style
  #   + owasp_ror_cheatsheet
  #   + owasp_top_10_n (where n is a number between 1 and 10)
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#54
  def check_family=(_arg0); end

  # Returns the value of attribute cve.
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#173
  def cve; end

  # source://dawnscanner//lib/dawn/kb/basic_check.rb#213
  def cve_link; end

  # Returns the value of attribute cvss.
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#11
  def cvss; end

  # source://dawnscanner//lib/dawn/kb/basic_check.rb#226
  def cvss_score; end

  # Returns the value of attribute cwe.
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#12
  def cwe; end

  # Put the check in debug mode
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#45
  def debug; end

  # Put the check in debug mode
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#45
  def debug=(_arg0); end

  # Vulnerability evidences
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#39
  def evidences; end

  # source://dawnscanner//lib/dawn/kb/basic_check.rb#164
  def family; end

  # source://dawnscanner//lib/dawn/kb/basic_check.rb#153
  def family=(item); end

  # The versions of the framework that fixes the vulnerability
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#36
  def fixes_version; end

  # Returns the value of attribute kind.
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#16
  def kind; end

  # Performs a self check against some core values from being not nil
  #
  # @return an Array with attributes with a nil value
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#238
  def lint; end

  # Returns the value of attribute message.
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#17
  def message; end

  # Returns the value of attribute mitigated.
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#20
  def mitigated; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#231
  def mitigated?; end

  # Returns the value of attribute name.
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#8
  def name; end

  # source://dawnscanner//lib/dawn/kb/basic_check.rb#216
  def nvd_link; end

  # Returns the value of attribute osvdb.
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#10
  def osvdb; end

  # source://dawnscanner//lib/dawn/kb/basic_check.rb#222
  def osvdb_link; end

  # Returns the value of attribute owasp.
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#13
  def owasp; end

  # Introduced in 2.1.0
  # It allows a security check to be marked as positive (vulnerable), only
  # if it matches the dependency gem name, ignoring the version.
  #
  # Only used in DEPENDENCY and UNSAFE_DEPENDENCY checks
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#86
  def please_ignore_dep_version; end

  # Introduced in 2.1.0
  # It allows a security check to be marked as positive (vulnerable), only
  # if it matches the dependency gem name, ignoring the version.
  #
  # Only used in DEPENDENCY and UNSAFE_DEPENDENCY checks
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#86
  def please_ignore_dep_version=(_arg0); end

  # This is the check priority level. It tells how fast you should
  # mitigate the vulnerability.
  #
  # Valid values are:
  #   + :critical
  #   + :high
  #   + :medium
  #   + :low
  #   + :info
  #   + :none
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#178
  def priority; end

  # This is the check priority level. It tells how fast you should
  # mitigate the vulnerability.
  #
  # Valid values are:
  #   + :critical
  #   + :high
  #   + :medium
  #   + :low
  #   + :info
  #   + :none
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#79
  def priority=(_arg0); end

  # Returns the value of attribute release_date.
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#14
  def release_date; end

  # Returns the value of attribute remediation.
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#18
  def remediation; end

  # This is the ruby version used by the target application. set in
  # Engine class around line #107
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#24
  def ruby_version; end

  # This is the ruby version used by the target application. set in
  # Engine class around line #107
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#24
  def ruby_version=(_arg0); end

  # This is an array of ruby versions that lead a parcitular version to
  # be exploitable.
  # In example, consider CVE-2013-1655, the Puppet rubygem version
  # vulnerability can be exploited only if ruby version is 1.9.3 or
  # higher
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#31
  def ruby_vulnerable_versions; end

  # source://dawnscanner//lib/dawn/kb/basic_check.rb#219
  def rubysec_advisories_link; end

  # This is the check severity level. It tells how dangerous is the
  # vulnerability for you application.
  #
  # Valid values are:
  #   + :critical
  #   + :high
  #   + :medium
  #   + :low
  #   + :info
  #   + :none
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#181
  def severity; end

  # This is the check severity level. It tells how dangerous is the
  # vulnerability for you application.
  #
  # Valid values are:
  #   + :critical
  #   + :high
  #   + :medium
  #   + :low
  #   + :info
  #   + :none
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#67
  def severity=(_arg0); end

  # Check status. Returns the latest vuln? call result
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#42
  def status; end

  # The framework target version
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#34
  def target_version; end

  # Returns the value of attribute title.
  #
  # source://dawnscanner//lib/dawn/kb/basic_check.rb#7
  def title; end

  class << self
    # source://dawnscanner//lib/dawn/kb/basic_check.rb#149
    def families; end
  end
end

# source://dawnscanner//lib/dawn/kb/basic_check.rb#55
Dawn::Kb::BasicCheck::ALLOWED_FAMILIES = T.let(T.unsafe(nil), Array)

# source://dawnscanner//lib/dawn/kb/combo_check.rb#3
class Dawn::Kb::ComboCheck
  include ::Dawn::Kb::BasicCheck

  # @return [ComboCheck] a new instance of ComboCheck
  #
  # source://dawnscanner//lib/dawn/kb/combo_check.rb#11
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute checks.
  #
  # source://dawnscanner//lib/dawn/kb/combo_check.rb#6
  def checks; end

  # source://dawnscanner//lib/dawn/kb/combo_check.rb#45
  def dump_status; end

  # Returns the value of attribute options.
  #
  # source://dawnscanner//lib/dawn/kb/combo_check.rb#7
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://dawnscanner//lib/dawn/kb/combo_check.rb#7
  def options=(_arg0); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/combo_check.rb#20
  def vuln?; end

  # Returns the value of attribute vulnerable_checks.
  #
  # source://dawnscanner//lib/dawn/kb/combo_check.rb#8
  def vulnerable_checks; end

  class << self
    # source://dawnscanner//lib/dawn/kb/combo_check.rb#53
    def find_vulnerable_checks_by_class(list = T.unsafe(nil), klass = T.unsafe(nil)); end
  end
end

# source://dawnscanner//lib/dawn/kb/dependency_check.rb#3
class Dawn::Kb::DependencyCheck
  include ::Dawn::Kb::BasicCheck

  # longer supperted and it will be removed really soon.
  #
  # @deprecated Please use UnsafeDependencyCheck instead. This class is no
  # @return [DependencyCheck] a new instance of DependencyCheck
  #
  # source://dawnscanner//lib/dawn/kb/dependency_check.rb#30
  def initialize(options); end

  # Returns the value of attribute aux_mitigation_gem.
  #
  # source://dawnscanner//lib/dawn/kb/dependency_check.rb#15
  def aux_mitigation_gem; end

  # Sets the attribute aux_mitigation_gem
  #
  # @param value the value to set the attribute aux_mitigation_gem to.
  #
  # source://dawnscanner//lib/dawn/kb/dependency_check.rb#15
  def aux_mitigation_gem=(_arg0); end

  # Returns the value of attribute dependencies.
  #
  # source://dawnscanner//lib/dawn/kb/dependency_check.rb#6
  def dependencies; end

  # Sets the attribute dependencies
  #
  # @param value the value to set the attribute dependencies to.
  #
  # source://dawnscanner//lib/dawn/kb/dependency_check.rb#6
  def dependencies=(_arg0); end

  # Returns the value of attribute not_affected.
  #
  # source://dawnscanner//lib/dawn/kb/dependency_check.rb#17
  def not_affected; end

  # Sets the attribute not_affected
  #
  # @param value the value to set the attribute not_affected to.
  #
  # source://dawnscanner//lib/dawn/kb/dependency_check.rb#17
  def not_affected=(_arg0); end

  # This attribute replaces fixed_dependency in 20130521.
  # There are cve checks like
  # http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-0175 that
  # addresses two different gems firing up the vulnerability. You can
  # read this like, "if you use gem A version A1 or if you use gem B
  # version B1 you can occur in this issue".
  #
  # source://dawnscanner//lib/dawn/kb/dependency_check.rb#14
  def safe_dependencies; end

  # This attribute replaces fixed_dependency in 20130521.
  # There are cve checks like
  # http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-0175 that
  # addresses two different gems firing up the vulnerability. You can
  # read this like, "if you use gem A version A1 or if you use gem B
  # version B1 you can occur in this issue".
  #
  # source://dawnscanner//lib/dawn/kb/dependency_check.rb#14
  def safe_dependencies=(_arg0); end

  # Returns the value of attribute save_major.
  #
  # source://dawnscanner//lib/dawn/kb/dependency_check.rb#26
  def save_major; end

  # Sets the attribute save_major
  #
  # @param value the value to set the attribute save_major to.
  #
  # source://dawnscanner//lib/dawn/kb/dependency_check.rb#26
  def save_major=(_arg0); end

  # Tells a version is not vulnerable even if in the fixes array that has
  # a minor version number higher than the current.
  # This is useful especially for rails version where 3.0.x, 3.1.y, 3.2.z
  # are separated branches and the patch is provided for all of those. So
  # if version 3.1.10 is safe and you have it, you don't be prompted
  # about 3.2.x.
  #
  # source://dawnscanner//lib/dawn/kb/dependency_check.rb#25
  def save_minor; end

  # Tells a version is not vulnerable even if in the fixes array that has
  # a minor version number higher than the current.
  # This is useful especially for rails version where 3.0.x, 3.1.y, 3.2.z
  # are separated branches and the patch is provided for all of those. So
  # if version 3.1.10 is safe and you have it, you don't be prompted
  # about 3.2.x.
  #
  # source://dawnscanner//lib/dawn/kb/dependency_check.rb#25
  def save_minor=(_arg0); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/dependency_check.rb#38
  def vuln?; end
end

# source://dawnscanner//lib/dawn/kb/deprecation_check.rb#3
class Dawn::Kb::DeprecationCheck
  include ::Dawn::Kb::BasicCheck

  # @return [DeprecationCheck] a new instance of DeprecationCheck
  #
  # source://dawnscanner//lib/dawn/kb/deprecation_check.rb#16
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute detected.
  #
  # source://dawnscanner//lib/dawn/kb/deprecation_check.rb#13
  def detected; end

  # Sets the attribute detected
  #
  # @param value the value to set the attribute detected to.
  #
  # source://dawnscanner//lib/dawn/kb/deprecation_check.rb#13
  def detected=(_arg0); end

  # Returns the value of attribute enable_warning.
  #
  # source://dawnscanner//lib/dawn/kb/deprecation_check.rb#14
  def enable_warning; end

  # Sets the attribute enable_warning
  #
  # @param value the value to set the attribute enable_warning to.
  #
  # source://dawnscanner//lib/dawn/kb/deprecation_check.rb#14
  def enable_warning=(_arg0); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/deprecation_check.rb#23
  def vuln?; end
end

# source://dawnscanner//lib/dawn/kb/deprecation_check.rb#6
Dawn::Kb::DeprecationCheck::DEPRECATION_MATRIX = T.let(T.unsafe(nil), Array)

# source://dawnscanner//lib/dawn/kb/operating_system_check.rb#3
class Dawn::Kb::OperatingSystemCheck
  include ::Dawn::Kb::BasicCheck

  # @return [OperatingSystemCheck] a new instance of OperatingSystemCheck
  #
  # source://dawnscanner//lib/dawn/kb/operating_system_check.rb#22
  def initialize(options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/operating_system_check.rb#34
  def different_family?; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/operating_system_check.rb#42
  def different_vendor?; end

  # source://dawnscanner//lib/dawn/kb/operating_system_check.rb#60
  def os_detect; end

  # safe_os is an Hash with this form {:family=>"", :vendor=>"", :version=>""}
  #
  # family can be one of the following:
  #   "linux"
  #   "windows"
  #   "unix"
  #   "osx"
  #   "freebsd"
  #   "netbsd"
  #   "openbsd"
  #   "unknown"
  # vendor will be either "microsoft", "apple", unix flavour or linux distribution accordingly
  #
  # source://dawnscanner//lib/dawn/kb/operating_system_check.rb#18
  def safe_os; end

  # safe_os is an Hash with this form {:family=>"", :vendor=>"", :version=>""}
  #
  # family can be one of the following:
  #   "linux"
  #   "windows"
  #   "unix"
  #   "osx"
  #   "freebsd"
  #   "netbsd"
  #   "openbsd"
  #   "unknown"
  # vendor will be either "microsoft", "apple", unix flavour or linux distribution accordingly
  #
  # source://dawnscanner//lib/dawn/kb/operating_system_check.rb#18
  def safe_os=(_arg0); end

  # Returns the value of attribute target_os.
  #
  # source://dawnscanner//lib/dawn/kb/operating_system_check.rb#19
  def target_os; end

  # Sets the attribute target_os
  #
  # @param value the value to set the attribute target_os to.
  #
  # source://dawnscanner//lib/dawn/kb/operating_system_check.rb#19
  def target_os=(_arg0); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/operating_system_check.rb#27
  def vuln?; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/operating_system_check.rb#50
  def vulnerable_os?; end
end

# source://dawnscanner//lib/dawn/kb/pattern_match_check.rb#5
class Dawn::Kb::PatternMatchCheck
  include ::Dawn::Kb::BasicCheck

  # @return [PatternMatchCheck] a new instance of PatternMatchCheck
  #
  # source://dawnscanner//lib/dawn/kb/pattern_match_check.rb#34
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute attack_pattern.
  #
  # source://dawnscanner//lib/dawn/kb/pattern_match_check.rb#9
  def attack_pattern; end

  # This attribute is false by default. If true, it tells pattern
  # matching check that the attack pattern is already a regular
  # expression.
  #
  # source://dawnscanner//lib/dawn/kb/pattern_match_check.rb#24
  def attack_pattern_is_regex; end

  # This attribute is false by default. If true, it tells pattern
  # matching check to ignore strings starting with the ruby single line
  # comment separator, '#'.
  #
  # source://dawnscanner//lib/dawn/kb/pattern_match_check.rb#19
  def avoid_comments; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/pattern_match_check.rb#49
  def must_exclude?(filename); end

  # This attribute is false by default. If true, the vuln? method check
  # if pattern attack is nor present.
  #
  # source://dawnscanner//lib/dawn/kb/pattern_match_check.rb#14
  def negative_search; end

  # Returns the value of attribute root_dir.
  #
  # source://dawnscanner//lib/dawn/kb/pattern_match_check.rb#10
  def root_dir; end

  # Sets the attribute root_dir
  #
  # @param value the value to set the attribute root_dir to.
  #
  # source://dawnscanner//lib/dawn/kb/pattern_match_check.rb#10
  def root_dir=(_arg0); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/pattern_match_check.rb#57
  def vuln?; end

  private

  # source://dawnscanner//lib/dawn/kb/pattern_match_check.rb#94
  def load_file(filename); end

  # source://dawnscanner//lib/dawn/kb/pattern_match_check.rb#103
  def run(lines); end

  # source://dawnscanner//lib/dawn/kb/pattern_match_check.rb#89
  def string_to_array(par); end
end

# source://dawnscanner//lib/dawn/kb/pattern_match_check.rb#26
Dawn::Kb::PatternMatchCheck::EXCLUSION_LIST = T.let(T.unsafe(nil), Array)

# source://dawnscanner//lib/dawn/kb/ruby_version_check.rb#3
class Dawn::Kb::RubyVersionCheck
  include ::Dawn::Kb::BasicCheck

  # Hash in the {:engine=>"ruby", :version=>"1.9.3", :patchlevel=>"p342"} form
  #
  # source://dawnscanner//lib/dawn/kb/ruby_version_check.rb#8
  def detected_ruby; end

  # Hash in the {:engine=>"ruby", :version=>"1.9.3", :patchlevel=>"p342"} form
  #
  # source://dawnscanner//lib/dawn/kb/ruby_version_check.rb#8
  def detected_ruby=(_arg0); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/ruby_version_check.rb#59
  def is_same_version?(target, fixes = T.unsafe(nil)); end

  # return true if ( vv && vengine )
  # return (ve && vp && vengine )
  #
  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/ruby_version_check.rb#52
  def is_vulnerable_engine?(target, fixes = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/ruby_version_check.rb#67
  def is_vulnerable_patchlevel?(version, patchlevel); end

  # Array of hashes in the {:engine=>"ruby", :version=>"1.9.3", :patchlevel=>"p342"} form
  #
  # source://dawnscanner//lib/dawn/kb/ruby_version_check.rb#6
  def safe_rubies; end

  # Array of hashes in the {:engine=>"ruby", :version=>"1.9.3", :patchlevel=>"p342"} form
  #
  # source://dawnscanner//lib/dawn/kb/ruby_version_check.rb#6
  def safe_rubies=(_arg0); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/ruby_version_check.rb#10
  def vuln?; end
end

# source://dawnscanner//lib/dawn/kb/rubygem_check.rb#4
class Dawn::Kb::RubygemCheck
  include ::Dawn::Kb::BasicCheck

  # @return [RubygemCheck] a new instance of RubygemCheck
  #
  # source://dawnscanner//lib/dawn/kb/rubygem_check.rb#10
  def initialize(options); end

  # Returns the value of attribute my_gem_version.
  #
  # source://dawnscanner//lib/dawn/kb/rubygem_check.rb#8
  def my_gem_version; end

  # Sets the attribute my_gem_version
  #
  # @param value the value to set the attribute my_gem_version to.
  #
  # source://dawnscanner//lib/dawn/kb/rubygem_check.rb#8
  def my_gem_version=(_arg0); end

  # Returns the value of attribute safe_versions.
  #
  # source://dawnscanner//lib/dawn/kb/rubygem_check.rb#7
  def safe_versions; end

  # Sets the attribute safe_versions
  #
  # @param value the value to set the attribute safe_versions to.
  #
  # source://dawnscanner//lib/dawn/kb/rubygem_check.rb#7
  def safe_versions=(_arg0); end

  # source://dawnscanner//lib/dawn/kb/rubygem_check.rb#18
  def take_gem_version_from_system; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/rubygem_check.rb#23
  def vuln?; end
end

# While working on the KB rebase, fetching data from NVD API, I suddenly
# realize I must change the way a vulnerable dependency must be handled.
# Instead of changing what is working right now, I'll add a new dependency
# check ruby class
# NVD bulletins lists versions that are vulnerable and it would break
# automatism adding a post data fetching step to realize which is the first
# safe version.
#
# This class will handle a dependency name, the version found in
# Gemfile.lock and an array of vulnerable versions. If the version found is
# in the array, than the vuln? method returns true.
# This is an approach far more easy rathern than the one chosen in the past.
#
# source://dawnscanner//lib/dawn/kb/unsafe_depedency_check.rb#15
class Dawn::Kb::UnsafeDependencyCheck
  include ::Dawn::Kb::BasicCheck

  # @return [UnsafeDependencyCheck] a new instance of UnsafeDependencyCheck
  #
  # source://dawnscanner//lib/dawn/kb/unsafe_depedency_check.rb#21
  def initialize(options); end

  # Returns the value of attribute dependencies.
  #
  # source://dawnscanner//lib/dawn/kb/unsafe_depedency_check.rb#18
  def dependencies; end

  # Sets the attribute dependencies
  #
  # @param value the value to set the attribute dependencies to.
  #
  # source://dawnscanner//lib/dawn/kb/unsafe_depedency_check.rb#18
  def dependencies=(_arg0); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/unsafe_depedency_check.rb#25
  def vuln?; end

  # Returns the value of attribute vulnerable_version_array.
  #
  # source://dawnscanner//lib/dawn/kb/unsafe_depedency_check.rb#19
  def vulnerable_version_array; end

  # Sets the attribute vulnerable_version_array
  #
  # @param value the value to set the attribute vulnerable_version_array to.
  #
  # source://dawnscanner//lib/dawn/kb/unsafe_depedency_check.rb#19
  def vulnerable_version_array=(_arg0); end
end

# source://dawnscanner//lib/dawn/kb/version_check.rb#3
class Dawn::Kb::VersionCheck
  include ::Dawn::Kb::BasicCheck

  # @return [VersionCheck] a new instance of VersionCheck
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#16
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute deprecated.
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#7
  def deprecated; end

  # Sets the attribute deprecated
  #
  # @param value the value to set the attribute deprecated to.
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#7
  def deprecated=(_arg0); end

  # Returns the value of attribute detected.
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#9
  def detected; end

  # Sets the attribute detected
  #
  # @param value the value to set the attribute detected to.
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#9
  def detected=(_arg0); end

  # Returns the value of attribute enable_warning.
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#13
  def enable_warning; end

  # Sets the attribute enable_warning
  #
  # @param value the value to set the attribute enable_warning to.
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#13
  def enable_warning=(_arg0); end

  # Returns the value of attribute excluded.
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#8
  def excluded; end

  # Sets the attribute excluded
  #
  # @param value the value to set the attribute excluded to.
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#8
  def excluded=(_arg0); end

  # Beta version handling
  #
  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#288
  def is_beta_check?(safe_version_beta, detected_version_beta); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#407
  def is_deprecated?(detected_version); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#92
  def is_detected_deprecated?; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#95
  def is_detected_excluded?; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#84
  def is_detected_highest?; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#77
  def is_detected_in_safe?; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#397
  def is_excluded?(detected_version); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#199
  def is_good_parameter?(array); end

  # Public: tells if a version is higher than another
  #
  # e.g.
  #   is_higher?('2.3.2', '2.4.2') => true
  #   is_higher?('2.3.2', '2.3.2') => true
  #
  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#110
  def is_higher?(a, b); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#99
  def is_higher_major?(s, d); end

  # pre version handling
  #
  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#338
  def is_pre_check?(safe_version_pre, detected_version_pre); end

  # Rc version handling
  #
  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#312
  def is_rc_check?(safe_version_rc, detected_version_rc); end

  # It checks if the first digit of a version array is the same
  #
  # e.g.
  # has_same_major?([2,3,3], [1,2,2]) #=> false
  # has_same_major?([2,3,3], [2,2,2]) #=> true
  #
  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#210
  def is_same_major?(array_a, array_b); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#214
  def is_same_minor?(array_a, array_b); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#218
  def is_same_patch?(array_a, array_b); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#262
  def is_same_version?(safe_version_array, detected_version_array, limit = T.unsafe(nil)); end

  # checks in the array if there is another string with higher major version
  #
  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#145
  def is_there_an_higher_major_version?; end

  # checks in the array if there is another string with higher minor version but the same major as the parameter element)
  #
  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#156
  def is_there_an_higher_minor_version?; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#231
  def is_vulnerable_aux_patch?(safe_version, detected_version); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#292
  def is_vulnerable_beta?(safe_version_beta, detected_version_beta); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#223
  def is_vulnerable_major?(safe_version, detected_version); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#239
  def is_vulnerable_minor?(safe_version, detected_version); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#227
  def is_vulnerable_patch?(safe_version, detected_version); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#342
  def is_vulnerable_pre?(safe_version_pre, detected_version_pre); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#316
  def is_vulnerable_rc?(safe_version_rc, detected_version_rc); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#357
  def is_vulnerable_version?(safe_version, detected_version); end

  # Returns the value of attribute safe.
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#6
  def safe; end

  # Sets the attribute safe
  #
  # @param value the value to set the attribute safe to.
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#6
  def safe=(_arg0); end

  # Returns the value of attribute save_major.
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#11
  def save_major; end

  # Sets the attribute save_major
  #
  # @param value the value to set the attribute save_major to.
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#11
  def save_major=(_arg0); end

  # source://dawnscanner//lib/dawn/kb/version_check.rb#165
  def save_major_fix; end

  # Returns the value of attribute save_minor.
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#10
  def save_minor; end

  # Sets the attribute save_minor
  #
  # @param value the value to set the attribute save_minor to.
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#10
  def save_minor=(_arg0); end

  # This functions handles an hack to save a detected version even if a
  # safe version with an higher minor version number has been found.
  #
  # This is mostly used in rails where there are different versions and
  # if a 3.2.12 is safe it should not marked as vulnerable just because
  # you can either use 3.3.x that is a different branch.
  #
  # It returns true when the detected version must be saved, false otherwise.
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#178
  def save_minor_fix; end

  # Returns the value of attribute status.
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#12
  def status; end

  # It takes a string representing a version and it splits it in an Hash.
  #
  # e.g.
  # version_string_to_array("3.2.3") #=> {:version=>[3,2,3], :beta=>0, :rc=>0}
  # version_string_to_array("3.2.2.beta1") #=> {:version=>[3,2,2], :beta=>1, :rc=>0}
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#447
  def version_string_to_array(string); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/kb/version_check.rb#29
  def vuln?; end
end

# This is the YAML powered knowledge base
#
# Dawnscanner KB will be a bunch of YAML file, stored in a hierachy of
# directories resembling security checks family. A digital signature will be
# also available to prevent KB tampering.
#
# This class will be accountable for:
#   + check for KB upgrade
#   + fetching the KB file from the Internet
#   + verifying the database signature
#   + reading YAML file, creating the security check array
#
# Another big change will be the MVC passed as constructor parameter, so only
# the checks regarding the particular app, will be loaded in the security
# check array. This should speed up BasicCheck internal routines.
#
# Class usage will be very simple. After getting the singleton instance, you
# will load the KB content. The load method will be also responsible about
# all relevant checks.
#
# Example
#
# require "dawn/knowledge_base"
#
# ...
#
# d = Dawn::KnowledgeBase.instance
# d.update if d.update?
# d.load
#
# Last update: Mon Mar 22 05:08:55 PM CET 2021
#
# source://dawnscanner//lib/dawn/knowledge_base.rb#60
class Dawn::KnowledgeBase
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [KnowledgeBase] a new instance of KnowledgeBase
  #
  # source://dawnscanner//lib/dawn/knowledge_base.rb#86
  def initialize(options = T.unsafe(nil)); end

  # source://dawnscanner//lib/dawn/knowledge_base.rb#211
  def all; end

  # source://dawnscanner//lib/dawn/knowledge_base.rb#105
  def default_path; end

  # Returns the value of attribute descriptor.
  #
  # source://dawnscanner//lib/dawn/knowledge_base.rb#82
  def descriptor; end

  # source://dawnscanner//lib/dawn/knowledge_base.rb#285
  def dump(verbose = T.unsafe(nil)); end

  # Returns the value of attribute error.
  #
  # source://dawnscanner//lib/dawn/knowledge_base.rb#84
  def error; end

  # source://dawnscanner//lib/dawn/knowledge_base.rb#123
  def find(name); end

  # Find all security issues affecting the gem passed as argument.
  # The gem parameter can contains also the version number, separated by a
  # ':'
  #
  # == Parameters:
  # string::
  #   A string containing the gem name, and eventually the version, to search
  #   for vulnerabilities.
  #   e.g.
  #     $ dawn kb list sinatra        =>  returns all bulletins affecting sinatra gem
  #     $ dawn kb list sinatra 2.0.0  =>  return all bulletins affecting
  #                                       sinatra gem version 2.0.0
  #
  # == Returns:
  # An array with all the vulnerabilities affecting the gem (or the
  # particular gem version if provided).
  #
  # source://dawnscanner//lib/dawn/knowledge_base.rb#144
  def find_issues_by_gem(string = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/knowledge_base.rb#114
  def is_packed?; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/knowledge_base.rb#118
  def is_valid?; end

  # Load security checks from db/ folder.
  #
  # Returns an array of security checks, matching the mvc to be reviewed and
  # the enabled check list or an empty array if an error occured.
  #
  # source://dawnscanner//lib/dawn/knowledge_base.rb#219
  def load(lint = T.unsafe(nil)); end

  # Returns the value of attribute path.
  #
  # source://dawnscanner//lib/dawn/knowledge_base.rb#83
  def path; end

  # Returns the value of attribute security_checks.
  #
  # source://dawnscanner//lib/dawn/knowledge_base.rb#81
  def security_checks; end

  # source://dawnscanner//lib/dawn/knowledge_base.rb#160
  def unpack; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/knowledge_base.rb#190
  def update?; end

  private

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/knowledge_base.rb#351
  def __load?; end

  # Check if the local KB is packet or not.
  #
  # Returns true if at least one KB tarball file it has been found in the
  # local DB path
  #
  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/knowledge_base.rb#344
  def __packed?; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/knowledge_base.rb#310
  def __valid?; end

  # source://dawnscanner//lib/dawn/knowledge_base.rb#304
  def __verify_hash(original, computed); end

  class << self
    # source://dawnscanner//lib/dawn/knowledge_base.rb#101
    def enabled_checks=(checks); end

    # source://dawnscanner//lib/dawn/knowledge_base.rb#186
    def kb_descriptor; end

    # source://dawnscanner//lib/dawn/knowledge_base.rb#110
    def path=(path_name); end

    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://dawnscanner//lib/dawn/knowledge_base.rb#73
Dawn::KnowledgeBase::COMBO_CHECK = T.let(T.unsafe(nil), Symbol)

# source://dawnscanner//lib/dawn/knowledge_base.rb#74
Dawn::KnowledgeBase::CUSTOM_CHECK = T.let(T.unsafe(nil), Symbol)

# source://dawnscanner//lib/dawn/knowledge_base.rb#68
Dawn::KnowledgeBase::DEPENDENCY_CHECK = T.let(T.unsafe(nil), Symbol)

# source://dawnscanner//lib/dawn/knowledge_base.rb#77
Dawn::KnowledgeBase::FILES = T.let(T.unsafe(nil), Array)

# source://dawnscanner//lib/dawn/knowledge_base.rb#67
Dawn::KnowledgeBase::GEM_CHECK = T.let(T.unsafe(nil), Symbol)

# source://dawnscanner//lib/dawn/knowledge_base.rb#72
Dawn::KnowledgeBase::OS_CHECK = T.let(T.unsafe(nil), Symbol)

# source://dawnscanner//lib/dawn/knowledge_base.rb#70
Dawn::KnowledgeBase::PATTERN_MATCH_CHECK = T.let(T.unsafe(nil), Symbol)

# source://dawnscanner//lib/dawn/knowledge_base.rb#76
Dawn::KnowledgeBase::REMOTE_KB_URL_PREFIX = T.let(T.unsafe(nil), String)

# source://dawnscanner//lib/dawn/knowledge_base.rb#71
Dawn::KnowledgeBase::RUBY_VERSION_CHECK = T.let(T.unsafe(nil), Symbol)

# source://dawnscanner//lib/dawn/knowledge_base.rb#69
Dawn::KnowledgeBase::UNSAFE_DEPENDENCY_CHECK = T.let(T.unsafe(nil), Symbol)

# source://dawnscanner//lib/dawn/knowledge_base.rb#79
Dawn::KnowledgeBase::VERSION = T.let(T.unsafe(nil), String)

# source://dawnscanner//lib/dawn/padrino.rb#3
class Dawn::Padrino
  include ::Dawn::Engine

  # @return [Padrino] a new instance of Padrino
  #
  # source://dawnscanner//lib/dawn/padrino.rb#8
  def initialize(dir = T.unsafe(nil)); end

  # Returns the value of attribute apps.
  #
  # source://dawnscanner//lib/dawn/padrino.rb#6
  def apps; end

  # source://dawnscanner//lib/dawn/padrino.rb#20
  def detect_apps; end

  # source://dawnscanner//lib/dawn/padrino.rb#13
  def get_sinatra_version; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/padrino.rb#74
  def is_mount_call?(a); end
end

# source://dawnscanner//lib/dawn/version.rb#3
Dawn::RELEASE = T.let(T.unsafe(nil), String)

# source://dawnscanner//lib/dawn/rails.rb#4
class Dawn::Rails
  include ::Dawn::Engine

  # @return [Rails] a new instance of Rails
  #
  # source://dawnscanner//lib/dawn/rails.rb#8
  def initialize(dir = T.unsafe(nil)); end
end

# source://dawnscanner//lib/dawn/reporter.rb#4
class Dawn::Reporter
  # @return [Reporter] a new instance of Reporter
  #
  # source://dawnscanner//lib/dawn/reporter.rb#6
  def initialize(options = T.unsafe(nil)); end

  # source://dawnscanner//lib/dawn/reporter.rb#18
  def report; end

  private

  # source://dawnscanner//lib/dawn/reporter.rb#282
  def ascii_plain_report; end

  # source://dawnscanner//lib/dawn/reporter.rb#162
  def ascii_tabular_report; end

  # source://dawnscanner//lib/dawn/reporter.rb#71
  def html_report; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/reporter.rb#65
  def is_valid_format?(format); end

  # source://dawnscanner//lib/dawn/reporter.rb#239
  def json_report; end

  # source://dawnscanner//lib/dawn/reporter.rb#26
  def write(output); end

  # source://dawnscanner//lib/dawn/reporter.rb#39
  def write_html(path, content); end

  # source://dawnscanner//lib/dawn/reporter.rb#58
  def write_table(path, content); end
end

# source://dawnscanner//lib/dawn/sinatra.rb#5
class Dawn::Sinatra
  include ::Dawn::Engine

  # @return [Sinatra] a new instance of Sinatra
  #
  # source://dawnscanner//lib/dawn/sinatra.rb#15
  def initialize(dir = T.unsafe(nil), mp = T.unsafe(nil)); end

  # Returns the value of attribute appname.
  #
  # source://dawnscanner//lib/dawn/sinatra.rb#9
  def appname; end

  # TODO: appname should be hopefully autodetect from config.ru
  #
  # source://dawnscanner//lib/dawn/sinatra.rb#26
  def detect_appname(target); end

  # source://dawnscanner//lib/dawn/sinatra.rb#34
  def detect_reflected_xss; end

  # source://dawnscanner//lib/dawn/sinatra.rb#48
  def detect_sinks(appname = T.unsafe(nil)); end

  # source://dawnscanner//lib/dawn/sinatra.rb#117
  def detect_views; end

  # @return [Boolean]
  #
  # source://dawnscanner//lib/dawn/sinatra.rb#112
  def is_assignement_from_params?(body, kind); end

  # mount_point is the mounting point for this Sinatra application. It's
  # filled up only in padrino engines
  #
  # source://dawnscanner//lib/dawn/sinatra.rb#13
  def mount_point; end

  # Returns the value of attribute sinks.
  #
  # source://dawnscanner//lib/dawn/sinatra.rb#8
  def sinks; end
end

# source://dawnscanner//lib/dawn/utils.rb#2
module Dawn::Utils
  # source://dawnscanner//lib/dawn/utils.rb#16
  def __debug_me_and_return(msg, status); end

  # source://dawnscanner//lib/dawn/utils.rb#3
  def debug_me(msg); end

  # source://dawnscanner//lib/dawn/utils.rb#13
  def debug_me_and_return_false(msg); end

  # source://dawnscanner//lib/dawn/utils.rb#10
  def debug_me_and_return_true(msg); end

  # source://dawnscanner//lib/dawn/utils.rb#6
  def debug_verbosely(msg); end
end

# source://dawnscanner//lib/dawn/version.rb#2
Dawn::VERSION = T.let(T.unsafe(nil), String)

# source://dawnscanner//lib/dawn/logger.rb#3
class Logger
  # source://dawnscanner//lib/dawn/logger.rb#12
  def bye; end

  # source://dawnscanner//lib/dawn/logger.rb#8
  def die(msg); end

  # source://dawnscanner//lib/dawn/logger.rb#4
  def helo(app, version); end
end

class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin
  include ::Dawn::Utils
end
