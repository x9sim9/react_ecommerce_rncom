# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `active_record_query_trace` gem.
# Please instead update this file by running `bin/tapioca gem active_record_query_trace`.

# source://active_record_query_trace//lib/active_record_query_trace/version.rb#3
module ActiveRecordQueryTrace
  class << self
    # Returns the value of attribute backtrace_cleaner.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#32
    def backtrace_cleaner; end

    # source://active_record_query_trace//lib/active_record_query_trace.rb#34
    def backtrace_cleaner=(cleaner); end

    # Returns the value of attribute colorize.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#30
    def colorize; end

    # Sets the attribute colorize
    #
    # @param value the value to set the attribute colorize to.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#30
    def colorize=(_arg0); end

    # source://active_record_query_trace//lib/active_record_query_trace.rb#49
    def default_cleaner; end

    # Sets the attribute default_cleaner
    #
    # @param value the value to set the attribute default_cleaner to.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#31
    def default_cleaner=(_arg0); end

    # Returns the value of attribute enabled.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#30
    def enabled; end

    # Sets the attribute enabled
    #
    # @param value the value to set the attribute enabled to.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#30
    def enabled=(_arg0); end

    # Returns the value of attribute ignore_cached_queries.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#30
    def ignore_cached_queries; end

    # Sets the attribute ignore_cached_queries
    #
    # @param value the value to set the attribute ignore_cached_queries to.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#30
    def ignore_cached_queries=(_arg0); end

    # Returns the value of attribute level.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#32
    def level; end

    # When changing the level we need to reset the backtrace cleaner used
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#44
    def level=(level); end

    # Returns the value of attribute lines.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#30
    def lines; end

    # Sets the attribute lines
    #
    # @param value the value to set the attribute lines to.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#30
    def lines=(_arg0); end

    # Returns the value of attribute query_type.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#30
    def query_type; end

    # Sets the attribute query_type
    #
    # @param value the value to set the attribute query_type to.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#30
    def query_type=(_arg0); end

    # This cannot be set in a constant as Rails.root is not yet available when
    # this file is loaded.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#75
    def rails_root_regexp; end

    # source://active_record_query_trace//lib/active_record_query_trace.rb#68
    def remove_filters_and_silencers(cleaner); end

    # The following code creates a brand new BacktraceCleaner just for the use of this Gem
    # avoiding the dealing with Rails.backtrace_cleaner
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#55
    def setup_backtrace_cleaner; end

    # Returns the value of attribute suppress_logging_of_db_reads.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#30
    def suppress_logging_of_db_reads; end

    # Sets the attribute suppress_logging_of_db_reads
    #
    # @param value the value to set the attribute suppress_logging_of_db_reads to.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#30
    def suppress_logging_of_db_reads=(_arg0); end
  end
end

# source://active_record_query_trace//lib/active_record_query_trace.rb#8
ActiveRecordQueryTrace::BACKTRACE_PREFIX = T.let(T.unsafe(nil), String)

# source://active_record_query_trace//lib/active_record_query_trace.rb#9
ActiveRecordQueryTrace::COLORS = T.let(T.unsafe(nil), Hash)

# source://active_record_query_trace//lib/active_record_query_trace.rb#80
class ActiveRecordQueryTrace::CustomLogSubscriber < ::ActiveRecord::LogSubscriber
  # @return [CustomLogSubscriber] a new instance of CustomLogSubscriber
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#81
  def initialize; end

  # source://active_record_query_trace//lib/active_record_query_trace.rb#99
  def default_cleaner(*_arg0, **_arg1, &_arg2); end

  # source://active_record_query_trace//lib/active_record_query_trace.rb#92
  def sql(event); end

  private

  # @return [Boolean]
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#105
  def cached_query?(payload); end

  # source://active_record_query_trace//lib/active_record_query_trace.rb#156
  def clean_trace(full_trace); end

  # source://active_record_query_trace//lib/active_record_query_trace.rb#190
  def color_code; end

  # Allow query to be colorized in the terminal
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#180
  def colorize_text(text); end

  # @return [Boolean]
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#131
  def db_read_query?(payload); end

  # @return [Boolean]
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#111
  def display_backtrace?(payload); end

  # @return [Boolean]
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#120
  def display_backtrace_for_query_type?(payload); end

  # source://active_record_query_trace//lib/active_record_query_trace.rb#135
  def fully_formatted_trace; end

  # Must be called after the backtrace cleaner.
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#143
  def lines_to_display(full_trace); end

  # Wrapper used for testing purposes.
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#186
  def original_trace; end

  # source://active_record_query_trace//lib/active_record_query_trace.rb#214
  def rails_root_prefix; end

  # @return [Boolean]
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#151
  def schema_query?(payload); end

  # @return [Boolean]
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#147
  def transaction_begin_or_commit_query?(payload); end

  # @return [Boolean]
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#210
  def valid_color_code?(color_code); end

  # source://active_record_query_trace//lib/active_record_query_trace.rb#203
  def validate_color_code(color_code); end
end

# source://active_record_query_trace//lib/active_record_query_trace.rb#7
ActiveRecordQueryTrace::INDENTATION = T.let(T.unsafe(nil), String)

# source://active_record_query_trace//lib/active_record_query_trace/version.rb#4
ActiveRecordQueryTrace::VERSION = T.let(T.unsafe(nil), String)
