# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rubycritic` gem.
# Please instead update this file by running `bin/tapioca gem rubycritic`.

# source://rubycritic//lib/rubycritic/source_control_systems/base.rb#6
module RubyCritic; end

# source://rubycritic//lib/rubycritic/command_factory.rb#6
class RubyCritic::CommandFactory
  class << self
    # source://rubycritic//lib/rubycritic/command_factory.rb#14
    def command_class(mode); end

    # source://rubycritic//lib/rubycritic/command_factory.rb#9
    def create(options = T.unsafe(nil)); end
  end
end

# source://rubycritic//lib/rubycritic/command_factory.rb#7
RubyCritic::CommandFactory::COMMAND_CLASS_MODES = T.let(T.unsafe(nil), Array)

# source://rubycritic//lib/rubycritic/configuration.rb#55
module RubyCritic::Config
  class << self
    # @return [Boolean]
    #
    # source://rubycritic//lib/rubycritic/configuration.rb#68
    def build_mode?; end

    # @return [Boolean]
    #
    # source://rubycritic//lib/rubycritic/configuration.rb#64
    def compare_branches_mode?; end

    # source://rubycritic//lib/rubycritic/configuration.rb#56
    def configuration; end

    # source://rubycritic//lib/rubycritic/configuration.rb#72
    def method_missing(method, *args, &block); end

    # @return [Boolean]
    #
    # source://rubycritic//lib/rubycritic/configuration.rb#80
    def respond_to_missing?(symbol, include_all = T.unsafe(nil)); end

    # source://rubycritic//lib/rubycritic/configuration.rb#60
    def set(options = T.unsafe(nil)); end
  end
end

# source://rubycritic//lib/rubycritic/configuration.rb#6
class RubyCritic::Configuration
  # Returns the value of attribute base_branch.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def base_branch; end

  # Sets the attribute base_branch
  #
  # @param value the value to set the attribute base_branch to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def base_branch=(_arg0); end

  # Returns the value of attribute base_branch_collection.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def base_branch_collection; end

  # Sets the attribute base_branch_collection
  #
  # @param value the value to set the attribute base_branch_collection to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def base_branch_collection=(_arg0); end

  # Returns the value of attribute base_branch_score.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def base_branch_score; end

  # Sets the attribute base_branch_score
  #
  # @param value the value to set the attribute base_branch_score to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def base_branch_score=(_arg0); end

  # Returns the value of attribute base_root_directory.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def base_root_directory; end

  # Sets the attribute base_root_directory
  #
  # @param value the value to set the attribute base_root_directory to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def base_root_directory=(_arg0); end

  # Returns the value of attribute churn_after.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def churn_after; end

  # Sets the attribute churn_after
  #
  # @param value the value to set the attribute churn_after to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def churn_after=(_arg0); end

  # Returns the value of attribute compare_root_directory.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def compare_root_directory; end

  # Sets the attribute compare_root_directory
  #
  # @param value the value to set the attribute compare_root_directory to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def compare_root_directory=(_arg0); end

  # Returns the value of attribute deduplicate_symlinks.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def deduplicate_symlinks; end

  # Sets the attribute deduplicate_symlinks
  #
  # @param value the value to set the attribute deduplicate_symlinks to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def deduplicate_symlinks=(_arg0); end

  # Returns the value of attribute feature_branch.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def feature_branch; end

  # Sets the attribute feature_branch
  #
  # @param value the value to set the attribute feature_branch to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def feature_branch=(_arg0); end

  # Returns the value of attribute feature_branch_collection.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def feature_branch_collection; end

  # Sets the attribute feature_branch_collection
  #
  # @param value the value to set the attribute feature_branch_collection to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def feature_branch_collection=(_arg0); end

  # Returns the value of attribute feature_branch_score.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def feature_branch_score; end

  # Sets the attribute feature_branch_score
  #
  # @param value the value to set the attribute feature_branch_score to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def feature_branch_score=(_arg0); end

  # Returns the value of attribute feature_root_directory.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def feature_root_directory; end

  # Sets the attribute feature_root_directory
  #
  # @param value the value to set the attribute feature_root_directory to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def feature_root_directory=(_arg0); end

  # Returns the value of attribute formats.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def formats; end

  # Sets the attribute formats
  #
  # @param value the value to set the attribute formats to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def formats=(_arg0); end

  # Returns the value of attribute formatters.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def formatters; end

  # Sets the attribute formatters
  #
  # @param value the value to set the attribute formatters to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def formatters=(_arg0); end

  # Returns the value of attribute mode.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def mode; end

  # Sets the attribute mode
  #
  # @param value the value to set the attribute mode to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def mode=(_arg0); end

  # Returns the value of attribute no_browser.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def no_browser; end

  # Sets the attribute no_browser
  #
  # @param value the value to set the attribute no_browser to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def no_browser=(_arg0); end

  # Returns the value of attribute open_with.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def open_with; end

  # Sets the attribute open_with
  #
  # @param value the value to set the attribute open_with to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def open_with=(_arg0); end

  # Returns the value of attribute paths.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def paths; end

  # Sets the attribute paths
  #
  # @param value the value to set the attribute paths to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def paths=(_arg0); end

  # Returns the value of attribute root.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#7
  def root; end

  # source://rubycritic//lib/rubycritic/configuration.rb#45
  def root=(path); end

  # Returns the value of attribute ruby_extensions.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def ruby_extensions; end

  # Sets the attribute ruby_extensions
  #
  # @param value the value to set the attribute ruby_extensions to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def ruby_extensions=(_arg0); end

  # source://rubycritic//lib/rubycritic/configuration.rb#15
  def set(options); end

  # source://rubycritic//lib/rubycritic/configuration.rb#28
  def setup_analysis_targets(options); end

  # source://rubycritic//lib/rubycritic/configuration.rb#39
  def setup_formats(options); end

  # source://rubycritic//lib/rubycritic/configuration.rb#33
  def setup_version_control(options); end

  # @return [Boolean]
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#49
  def source_control_present?; end

  # Returns the value of attribute source_control_system.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def source_control_system; end

  # Sets the attribute source_control_system
  #
  # @param value the value to set the attribute source_control_system to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def source_control_system=(_arg0); end

  # Returns the value of attribute suppress_ratings.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def suppress_ratings; end

  # Sets the attribute suppress_ratings
  #
  # @param value the value to set the attribute suppress_ratings to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def suppress_ratings=(_arg0); end

  # Returns the value of attribute threshold_score.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def threshold_score; end

  # Sets the attribute threshold_score
  #
  # @param value the value to set the attribute threshold_score to.
  #
  # source://rubycritic//lib/rubycritic/configuration.rb#8
  def threshold_score=(_arg0); end
end

# source://rubycritic//lib/rubycritic/source_control_systems/base.rb#7
module RubyCritic::SourceControlSystem; end

# source://rubycritic//lib/rubycritic/source_control_systems/base.rb#8
class RubyCritic::SourceControlSystem::Base
  class << self
    # source://rubycritic//lib/rubycritic/source_control_systems/base.rb#31
    def connected_system_names; end

    # source://rubycritic//lib/rubycritic/source_control_systems/base.rb#19
    def create; end

    # source://rubycritic//lib/rubycritic/source_control_systems/base.rb#11
    def register_system; end

    # source://rubycritic//lib/rubycritic/source_control_systems/base.rb#15
    def systems; end
  end
end

# source://rubycritic//lib/rubycritic/source_control_systems/double.rb#5
class RubyCritic::SourceControlSystem::Double < ::RubyCritic::SourceControlSystem::Base
  # source://rubycritic//lib/rubycritic/source_control_systems/double.rb#10
  def date_of_last_commit(_path); end

  # @return [Boolean]
  #
  # source://rubycritic//lib/rubycritic/source_control_systems/double.rb#14
  def revision?; end

  # source://rubycritic//lib/rubycritic/source_control_systems/double.rb#6
  def revisions_count(_path); end
end

# source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#5
class RubyCritic::SourceControlSystem::Git < ::RubyCritic::SourceControlSystem::Base
  # source://rubycritic//lib/rubycritic/source_control_systems/git.rb#32
  def churn; end

  # source://rubycritic//lib/rubycritic/source_control_systems/git.rb#40
  def date_of_last_commit(path); end

  # source://rubycritic//lib/rubycritic/source_control_systems/git.rb#20
  def git(arg); end

  # source://rubycritic//lib/rubycritic/source_control_systems/git.rb#48
  def head_reference; end

  # @return [Boolean]
  #
  # source://rubycritic//lib/rubycritic/source_control_systems/git.rb#44
  def revision?; end

  # source://rubycritic//lib/rubycritic/source_control_systems/git.rb#36
  def revisions_count(path); end

  # source://rubycritic//lib/rubycritic/source_control_systems/git.rb#52
  def travel_to_head; end

  private

  # source://rubycritic//lib/rubycritic/source_control_systems/git.rb#91
  def stash_changes; end

  # source://rubycritic//lib/rubycritic/source_control_systems/git.rb#98
  def stashes_count; end

  # source://rubycritic//lib/rubycritic/source_control_systems/git.rb#102
  def travel_to_original_state; end

  class << self
    # source://rubycritic//lib/rubycritic/source_control_systems/git.rb#82
    def current_branch; end

    # source://rubycritic//lib/rubycritic/source_control_systems/git.rb#12
    def git(arg); end

    # source://rubycritic//lib/rubycritic/source_control_systems/git.rb#72
    def modified_files; end

    # @return [Boolean]
    #
    # source://rubycritic//lib/rubycritic/source_control_systems/git.rb#24
    def supported?; end

    # source://rubycritic//lib/rubycritic/source_control_systems/git.rb#59
    def switch_branch(branch); end

    # source://rubycritic//lib/rubycritic/source_control_systems/git.rb#28
    def to_s; end

    # source://rubycritic//lib/rubycritic/source_control_systems/git.rb#66
    def uncommitted_changes; end
  end
end

# source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#23
class RubyCritic::SourceControlSystem::Git::Churn
  # @return [Churn] a new instance of Churn
  #
  # source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#24
  def initialize(churn_after: T.unsafe(nil), paths: T.unsafe(nil)); end

  # source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#37
  def date_of_last_commit(path); end

  # source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#33
  def revisions_count(path); end

  private

  # source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#63
  def after_clause; end

  # source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#43
  def call; end

  # source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#47
  def exec_git_command(command); end

  # source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#90
  def filename_for_subdirectory(filename); end

  # source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#59
  def git_log_command(path); end

  # source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#55
  def git_log_commands; end

  # source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#81
  def process_date(date); end

  # source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#99
  def process_file(filename); end

  # source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#67
  def process_line(line); end

  # source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#85
  def process_rename(from, to); end

  # source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#103
  def record_commit(filename, date); end

  # source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#108
  def renames; end

  # source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#112
  def stats(path); end
end

# source://rubycritic//lib/rubycritic/source_control_systems/git.rb#10
RubyCritic::SourceControlSystem::Git::GIT_EXECUTABLE = T.let(T.unsafe(nil), String)

# source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#8
class RubyCritic::SourceControlSystem::Git::Renames
  # @return [Renames] a new instance of Renames
  #
  # source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#9
  def initialize; end

  # source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#18
  def current(name); end

  # source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#13
  def renamed(from, to); end
end

# source://rubycritic//lib/rubycritic/source_control_systems/git/churn.rb#6
class RubyCritic::SourceControlSystem::Git::Stats < ::Struct
  # Returns the value of attribute count
  #
  # @return [Object] the current value of count
  def count; end

  # Sets the attribute count
  #
  # @param value [Object] the value to set the attribute count to.
  # @return [Object] the newly set value
  def count=(_); end

  # Returns the value of attribute date
  #
  # @return [Object] the current value of date
  def date; end

  # Sets the attribute date
  #
  # @param value [Object] the value to set the attribute date to.
  # @return [Object] the newly set value
  def date=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rubycritic//lib/rubycritic/source_control_systems/mercurial.rb#5
class RubyCritic::SourceControlSystem::Mercurial < ::RubyCritic::SourceControlSystem::Base
  # source://rubycritic//lib/rubycritic/source_control_systems/mercurial.rb#20
  def date_of_last_commit(path); end

  # @return [Boolean]
  #
  # source://rubycritic//lib/rubycritic/source_control_systems/mercurial.rb#24
  def revision?; end

  # source://rubycritic//lib/rubycritic/source_control_systems/mercurial.rb#16
  def revisions_count(path); end

  class << self
    # @return [Boolean]
    #
    # source://rubycritic//lib/rubycritic/source_control_systems/mercurial.rb#8
    def supported?; end

    # source://rubycritic//lib/rubycritic/source_control_systems/mercurial.rb#12
    def to_s; end
  end
end

# source://rubycritic//lib/rubycritic/source_control_systems/perforce.rb#7
RubyCritic::SourceControlSystem::PERFORCE_FSTAT_OPTS = T.let(T.unsafe(nil), String)

# source://rubycritic//lib/rubycritic/source_control_systems/perforce.rb#10
class RubyCritic::SourceControlSystem::Perforce < ::RubyCritic::SourceControlSystem::Base
  # source://rubycritic//lib/rubycritic/source_control_systems/perforce.rb#51
  def date_of_last_commit(path); end

  # source://rubycritic//lib/rubycritic/source_control_systems/perforce.rb#59
  def head_reference; end

  # @return [Boolean]
  #
  # source://rubycritic//lib/rubycritic/source_control_systems/perforce.rb#55
  def revision?; end

  # source://rubycritic//lib/rubycritic/source_control_systems/perforce.rb#47
  def revisions_count(path); end

  private

  # source://rubycritic//lib/rubycritic/source_control_systems/perforce.rb#111
  def perforce_files; end

  class << self
    # source://rubycritic//lib/rubycritic/source_control_systems/perforce.rb#63
    def build_file_cache; end

    # @return [Boolean]
    #
    # source://rubycritic//lib/rubycritic/source_control_systems/perforce.rb#34
    def child?(root, target); end

    # source://rubycritic//lib/rubycritic/source_control_systems/perforce.rb#90
    def compute_cache_lines(lines); end

    # source://rubycritic//lib/rubycritic/source_control_systems/perforce.rb#76
    def compute_line(file_cache, line_aggregator, line); end

    # @return [Boolean]
    #
    # source://rubycritic//lib/rubycritic/source_control_systems/perforce.rb#25
    def in_client_directory?; end

    # source://rubycritic//lib/rubycritic/source_control_systems/perforce.rb#84
    def insert_file_cache(file_cache, lines); end

    # source://rubycritic//lib/rubycritic/source_control_systems/perforce.rb#101
    def key_file(source_file_path); end

    # source://rubycritic//lib/rubycritic/source_control_systems/perforce.rb#105
    def normalized_file_path(file_path); end

    # @return [Boolean]
    #
    # source://rubycritic//lib/rubycritic/source_control_systems/perforce.rb#18
    def p4_installed?; end

    # @return [Boolean]
    #
    # source://rubycritic//lib/rubycritic/source_control_systems/perforce.rb#13
    def supported?; end

    # source://rubycritic//lib/rubycritic/source_control_systems/perforce.rb#43
    def to_s; end
  end
end

# source://rubycritic//lib/rubycritic/source_control_systems/perforce.rb#8
class RubyCritic::SourceControlSystem::PerforceStats < ::Struct
  # Returns the value of attribute filename
  #
  # @return [Object] the current value of filename
  def filename; end

  # Sets the attribute filename
  #
  # @param value [Object] the value to set the attribute filename to.
  # @return [Object] the newly set value
  def filename=(_); end

  # Returns the value of attribute head
  #
  # @return [Object] the current value of head
  def head; end

  # Sets the attribute head
  #
  # @param value [Object] the value to set the attribute head to.
  # @return [Object] the newly set value
  def head=(_); end

  # Returns the value of attribute last_commit
  #
  # @return [Object] the current value of last_commit
  def last_commit; end

  # Sets the attribute last_commit
  #
  # @param value [Object] the value to set the attribute last_commit to.
  # @return [Object] the newly set value
  def last_commit=(_); end

  # Returns the value of attribute opened?
  #
  # @return [Object] the current value of opened?
  def opened?; end

  # Returns the value of attribute revision
  #
  # @return [Object] the current value of revision
  def revision; end

  # Sets the attribute revision
  #
  # @param value [Object] the value to set the attribute revision to.
  # @return [Object] the newly set value
  def revision=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end
