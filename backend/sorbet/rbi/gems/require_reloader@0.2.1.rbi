# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `require_reloader` gem.
# Please instead update this file by running `bin/tapioca gem require_reloader`.

# source://require_reloader//lib/require_reloader/version.rb#1
module RequireReloader
  class << self
    # Reload a specific gem or a gem-like .rb file
    # automatically on each request.
    #
    # In Rails 3.2+, reload happens only when a watchable file is modified.
    #
    # To use it, add 'RequireReloader.watch :my_gem' to
    # your config/environments/development.rb.
    #
    # source://require_reloader//lib/require_reloader.rb#34
    def watch(gem_name, opts = T.unsafe(nil)); end

    # Reload all local gems (that is, ones which have a :path attribute)
    # automatically on each request.
    #
    # To use it, add 'RequireReloader.watch_local_gems!' to
    # your config/environments/development.rb.
    # Propose to deprecate :watch_all! and reserve it for future usage.
    #
    # source://require_reloader//lib/require_reloader.rb#14
    def watch_all!; end

    # Reload all local gems (that is, ones which have a :path attribute)
    # automatically on each request.
    #
    # To use it, add 'RequireReloader.watch_local_gems!' to
    # your config/environments/development.rb.
    #
    # source://require_reloader//lib/require_reloader.rb#14
    def watch_local_gems!; end

    private

    # source://require_reloader//lib/require_reloader.rb#64
    def expanded_gem_path(gem, preferred_path); end

    # returns only local gems, local git repo
    #
    # source://require_reloader//lib/require_reloader.rb#71
    def local_gems; end
  end
end

# Methods copied from latest ActiveSupport::Inflector to support
# older Rails versions (e.g. 3.0) without these methods.
#
# source://require_reloader//lib/require_reloader/helper.rb#4
module RequireReloader::ActionPackInfectorMethods
  # source://require_reloader//lib/require_reloader/helper.rb#20
  def const_regexp(camel_cased_word); end

  # source://require_reloader//lib/require_reloader/helper.rb#9
  def constantize(camel_cased_word); end

  # source://require_reloader//lib/require_reloader/helper.rb#5
  def deconstantize(path); end

  # source://require_reloader//lib/require_reloader/helper.rb#29
  def demodulize(path); end

  # source://require_reloader//lib/require_reloader/helper.rb#38
  def safe_constantize(camel_cased_word); end
end

# source://require_reloader//lib/require_reloader/helper.rb#50
class RequireReloader::Helper
  include ::RequireReloader::ActionPackInfectorMethods

  # source://require_reloader//lib/require_reloader/helper.rb#78
  def camelcase(str); end

  # source://require_reloader//lib/require_reloader/helper.rb#73
  def full_qualified_name(gem_name); end

  # @return [Boolean]
  #
  # source://require_reloader//lib/require_reloader/helper.rb#62
  def module_defined?(full_name); end

  # source://require_reloader//lib/require_reloader/helper.rb#53
  def remove_gem_module_if_defined(gem_name); end

  # source://require_reloader//lib/require_reloader/helper.rb#66
  def remove_module(full_name); end

  # source://require_reloader//lib/require_reloader/helper.rb#58
  def remove_module_if_defined(mod_name); end

  # source://require_reloader//lib/require_reloader/helper.rb#82
  def to_prepare(&block); end
end

# source://require_reloader//lib/require_reloader/version.rb#2
RequireReloader::VERSION = T.let(T.unsafe(nil), String)

# source://require_reloader//lib/require_reloader/railtie.rb#1
class RequireReloaderRailtie < ::Rails::Railtie; end
