# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `shoulda` gem.
# Please instead update this file by running `bin/tapioca gem shoulda`.

# :enddoc:
#
# source://shoulda//lib/shoulda/integrations/rspec2.rb#7
module RSpec; end

# source://shoulda//lib/shoulda/integrations/rspec2.rb#8
module RSpec::Matchers
  include ::Shoulda::ActiveRecord::Matchers

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_block_changing(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_block_outputting(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_block_raising(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_block_throwing(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_block_yielding_control(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_block_yielding_successive_args(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_block_yielding_with_args(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_block_yielding_with_no_args(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_collection_containing_exactly(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_collection_ending_with(*args, **_arg1, &block); end

  # source://rspec-collection_matchers/1.2.1/lib/rspec/collection_matchers/matchers.rb#33
  def a_collection_having(n); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_collection_including(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_collection_starting_with(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_falsey_value(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_falsy_value(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_hash_including(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_kind_of(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_nil_value(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_range_covering(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_string_ending_with(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_string_including(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_string_matching(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_string_starting_with(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_truthy_value(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_value(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_value_between(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def a_value_within(*args, **_arg1, &block); end

  # source://rspec-graphql_matchers/1.4.0/lib/rspec/graphql_matchers/matchers.rb#16
  def accept_argument(expected_argument); end

  # source://rspec-graphql_matchers/1.4.0/lib/rspec/graphql_matchers/matchers.rb#20
  def accept_arguments(expected_args); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#305
  def aggregate_failures(label = T.unsafe(nil), metadata = T.unsafe(nil), &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#662
  def all(expected); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def an_array_matching(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def an_instance_of(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def an_object_eq_to(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def an_object_eql_to(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def an_object_equal_to(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def an_object_existing(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def an_object_having_attributes(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def an_object_matching(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def an_object_responding_to(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def an_object_satisfying(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#349
  def be(*args); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#355
  def be_a(klass); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#378
  def be_a_kind_of(expected); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#355
  def be_an(klass); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#366
  def be_an_instance_of(expected); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#395
  def be_between(min, max); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#316
  def be_falsey; end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def be_falsy(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#366
  def be_instance_of(expected); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#378
  def be_kind_of(expected); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#324
  def be_nil; end

  # source://rspec-graphql_matchers/1.4.0/lib/rspec/graphql_matchers/matchers.rb#12
  def be_of_type(expected); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#310
  def be_truthy; end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#405
  def be_within(delta); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#492
  def change(receiver = T.unsafe(nil), message = T.unsafe(nil), &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def changing(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#510
  def contain_exactly(*items); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def containing_exactly(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#528
  def cover(*values); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def covering(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#543
  def end_with(*expected); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def ending_with(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#558
  def eq(expected); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def eq_to(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#572
  def eql(expected); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def eql_to(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#586
  def equal(expected); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def equal_to(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#596
  def exist(*args); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def existing(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/expectations/syntax.rb#72
  def expect(value = T.unsafe(nil), &block); end

  # source://rspec-collection_matchers/1.2.1/lib/rspec/collection_matchers/matchers.rb#33
  def have(n); end

  # source://rspec-graphql_matchers/1.4.0/lib/rspec/graphql_matchers/matchers.rb#25
  def have_a_field(field_name); end

  # source://rspec-graphql_matchers/1.4.0/lib/rspec/graphql_matchers/matchers.rb#35
  def have_a_return_field(field_name); end

  # source://rspec-graphql_matchers/1.4.0/lib/rspec/graphql_matchers/matchers.rb#30
  def have_an_input_field(field_name); end

  # source://rspec-collection_matchers/1.2.1/lib/rspec/collection_matchers/matchers.rb#47
  def have_at_least(n); end

  # source://rspec-collection_matchers/1.2.1/lib/rspec/collection_matchers/matchers.rb#59
  def have_at_most(n); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#616
  def have_attributes(expected); end

  # source://rspec-collection_matchers/1.2.1/lib/rspec/collection_matchers/matchers.rb#33
  def have_exactly(n); end

  # source://rspec-graphql_matchers/1.4.0/lib/rspec/graphql_matchers/matchers.rb#25
  def have_field(field_name); end

  # source://rspec-graphql_matchers/1.4.0/lib/rspec/graphql_matchers/matchers.rb#30
  def have_input_field(field_name); end

  # source://rspec-graphql_matchers/1.4.0/lib/rspec/graphql_matchers/matchers.rb#35
  def have_return_field(field_name); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def having_attributes(*args, **_arg1, &block); end

  # source://rspec-graphql_matchers/1.4.0/lib/rspec/graphql_matchers/matchers.rb#41
  def implement(*interface_names); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#639
  def include(*expected); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def including(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#697
  def match(expected); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#715
  def match_array(items); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def match_regex(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def matching(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#752
  def output(expected = T.unsafe(nil)); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#773
  def raise_error(error = T.unsafe(nil), message = T.unsafe(nil), &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#773
  def raise_exception(error = T.unsafe(nil), message = T.unsafe(nil), &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def raising(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#792
  def respond_to(*names); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def responding_to(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#813
  def satisfy(description = T.unsafe(nil), &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def satisfying(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#828
  def start_with(*expected); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def starting_with(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#850
  def throw_symbol(expected_symbol = T.unsafe(nil), expected_arg = T.unsafe(nil)); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def throwing(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def within(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#871
  def yield_control; end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#940
  def yield_successive_args(*args); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#919
  def yield_with_args(*args); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#889
  def yield_with_no_args; end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def yielding_control(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def yielding_successive_args(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def yielding_with_args(*args, **_arg1, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers/dsl.rb#38
  def yielding_with_no_args(*args, **_arg1, &block); end

  private

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#961
  def method_missing(method, *args, **_arg2, &block); end

  # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#974
  def respond_to_missing?(method, *_arg1); end

  class << self
    # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#250
    def alias_matcher(*args, &block); end

    # source://rspec-expectations/3.13.0/lib/rspec/matchers/generated_descriptions.rb#11
    def clear_generated_description; end

    # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#951
    def configuration; end

    # source://rspec-expectations/3.13.0/lib/rspec/matchers/generated_descriptions.rb#19
    def generated_description; end

    # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#1008
    def is_a_describable_matcher?(obj); end

    # source://rspec-expectations/3.13.0/lib/rspec/matchers.rb#988
    def is_a_matcher?(obj); end

    # source://rspec-expectations/3.13.0/lib/rspec/matchers/generated_descriptions.rb#25
    def last_description; end

    # source://rspec-expectations/3.13.0/lib/rspec/matchers/generated_descriptions.rb#5
    def last_expectation_handler; end

    # source://rspec-expectations/3.13.0/lib/rspec/matchers/generated_descriptions.rb#5
    def last_expectation_handler=(_arg0); end

    # source://rspec-expectations/3.13.0/lib/rspec/matchers/generated_descriptions.rb#5
    def last_matcher; end

    # source://rspec-expectations/3.13.0/lib/rspec/matchers/generated_descriptions.rb#5
    def last_matcher=(_arg0); end
  end
end

# source://shoulda//lib/shoulda/integrations/rspec2.rb#12
module RSpec::Rails; end

# source://shoulda//lib/shoulda/integrations/rspec2.rb#13
module RSpec::Rails::ControllerExampleGroup
  include ::Shoulda::ActionController::Matchers
end

# source://shoulda//lib/shoulda/integrations/rspec2.rb#17
module RSpec::Rails::MailerExampleGroup
  include ::Shoulda::ActionMailer::Matchers
end

# source://shoulda//lib/shoulda/version.rb#1
module Shoulda; end

# source://shoulda//lib/shoulda/action_controller/matchers/assign_to_matcher.rb#2
module Shoulda::ActionController; end

# By using the macro helpers you can quickly and easily create concise and
# easy to read test suites.
#
# This code segment:
#
#   describe UsersController, "on GET to show with a valid id" do
#     before(:each) do
#       get :show, :id => User.first.to_param
#     end
#
#     it { should assign_to(:user) }
#     it { should respond_with(:success) }
#     it { should render_template(:show) }
#     it { should not_set_the_flash) }
#
#     it "should do something else really cool" do
#       assigns[:user].id.should == 1
#     end
#   end
#
# Would produce 5 tests for the show action
#
# source://shoulda//lib/shoulda/action_controller/matchers/assign_to_matcher.rb#3
module Shoulda::ActionController::Matchers
  # Ensures that the controller assigned to the named instance variable.
  #
  # Options:
  # * <tt>with_kind_of</tt> - The expected class of the instance variable
  #   being checked.
  # * <tt>with</tt> - The value that should be assigned.
  #
  # Example:
  #
  #   it { should assign_to(:user) }
  #   it { should_not assign_to(:user) }
  #   it { should assign_to(:user).with_kind_of(User) }
  #   it { should assign_to(:user).with(@user) }
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/assign_to_matcher.rb#18
  def assign_to(variable); end

  # Ensures that filter_parameter_logging is set for the specified key.
  #
  # Example:
  #
  #   it { should filter_param(:password) }
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/filter_param_matcher.rb#10
  def filter_param(key); end

  # Ensures a controller redirected to the given url.
  #
  # Example:
  #
  #   it { should redirect_to('http://somewhere.com')  }
  #   it { should redirect_to(users_path)  }
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/redirect_to_matcher.rb#11
  def redirect_to(url_or_description, &block); end

  # Ensures a controller rendered the given template.
  #
  # Example:
  #
  #   it { should render_template(:show)  }
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/render_template_matcher.rb#10
  def render_template(template); end

  # Ensures that the controller rendered with the given layout.
  #
  # Example:
  #
  #   it { should render_with_layout }
  #   it { should render_with_layout(:special) }
  #   it { should_not render_with_layout }
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/render_with_layout_matcher.rb#12
  def render_with_layout(expected_layout = T.unsafe(nil)); end

  # Ensures a controller responded with expected 'response' status code.
  #
  # You can pass an explicit status number like 200, 301, 404, 500
  # or its symbolic equivalent :success, :redirect, :missing, :error.
  # See ActionController::StatusCodes for a full list.
  #
  # Example:
  #
  #   it { should respond_with(:success)  }
  #   it { should respond_with(:redirect) }
  #   it { should respond_with(:missing)  }
  #   it { should respond_with(:error)    }
  #   it { should respond_with(501)       }
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/respond_with_matcher.rb#18
  def respond_with(status); end

  # Ensures a controller responded with expected 'response' content type.
  #
  # You can pass an explicit content type such as 'application/rss+xml'
  # or its symbolic equivalent :rss
  # or a regular expression such as /rss/
  #
  # Example:
  #
  #   it { should respond_with_content_type(:xml)  }
  #   it { should respond_with_content_type(:csv)  }
  #   it { should respond_with_content_type(:atom) }
  #   it { should respond_with_content_type(:yaml) }
  #   it { should respond_with_content_type(:text) }
  #   it { should respond_with_content_type('application/rss+xml')  }
  #   it { should respond_with_content_type(/json/) }
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/respond_with_content_type_matcher.rb#20
  def respond_with_content_type(content_type); end

  # Ensures that requesting +path+ using +method+ routes to +options+.
  #
  # If you don't specify a controller, it will use the controller from the
  # example group.
  #
  # +to_param+ is called on the +options+ given.
  #
  # Examples:
  #
  #   it { should route(:get, "/posts").
  #                 to(:controller => :posts, :action => :index) }
  #   it { should route(:get, "/posts/new").to(:action => :new) }
  #   it { should route(:post, "/posts").to(:action => :create) }
  #   it { should route(:get, "/posts/1").to(:action => :show, :id => 1) }
  #   it { should route(:edit, "/posts/1").to(:action => :show, :id => 1) }
  #   it { should route(:put, "/posts/1").to(:action => :update, :id => 1) }
  #   it { should route(:delete, "/posts/1").
  #                 to(:action => :destroy, :id => 1) }
  #   it { should route(:get, "/users/1/posts/1").
  #                 to(:action => :show, :id => 1, :user_id => 1) }
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/route_matcher.rb#25
  def route(method, path); end

  # Ensures that a session key was set to the expected value.
  #
  # Example:
  #
  #   it { should set_session(:message) }
  #   it { should set_session(:user_id).to(@user.id) }
  #   it { should_not set_session(:user_id) }
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/set_session_matcher.rb#12
  def set_session(key); end

  # Ensures that the flash contains the given value. Can be a String, a
  # Regexp, or nil (indicating that the flash should not be set).
  #
  # Example:
  #
  #   it { should set_the_flash }
  #   it { should set_the_flash.to("Thank you for placing this order.") }
  #   it { should set_the_flash.to(/created/i) }
  #   it { should set_the_flash.to(/logged in/i).now }
  #   it { should_not set_the_flash }
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/set_the_flash_matcher.rb#15
  def set_the_flash; end
end

# source://shoulda//lib/shoulda/action_controller/matchers/assign_to_matcher.rb#22
class Shoulda::ActionController::Matchers::AssignToMatcher
  # @return [AssignToMatcher] a new instance of AssignToMatcher
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/assign_to_matcher.rb#24
  def initialize(variable); end

  # source://shoulda//lib/shoulda/action_controller/matchers/assign_to_matcher.rb#47
  def description; end

  # Returns the value of attribute failure_message.
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/assign_to_matcher.rb#45
  def failure_message; end

  # source://shoulda//lib/shoulda/action_controller/matchers/assign_to_matcher.rb#53
  def in_context(context); end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/assign_to_matcher.rb#39
  def matches?(controller); end

  # Returns the value of attribute negative_failure_message.
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/assign_to_matcher.rb#45
  def negative_failure_message; end

  # source://shoulda//lib/shoulda/action_controller/matchers/assign_to_matcher.rb#33
  def with(expected_value = T.unsafe(nil), &block); end

  # source://shoulda//lib/shoulda/action_controller/matchers/assign_to_matcher.rb#28
  def with_kind_of(expected_class); end

  private

  # source://shoulda//lib/shoulda/action_controller/matchers/assign_to_matcher.rb#104
  def assigned_value; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/assign_to_matcher.rb#60
  def assigned_value?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/assign_to_matcher.rb#89
  def equal_to_expected_value?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/assign_to_matcher.rb#73
  def kind_of_expected_class?; end
end

# source://shoulda//lib/shoulda/action_controller/matchers/filter_param_matcher.rb#14
class Shoulda::ActionController::Matchers::FilterParamMatcher
  # @return [FilterParamMatcher] a new instance of FilterParamMatcher
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/filter_param_matcher.rb#16
  def initialize(key); end

  # source://shoulda//lib/shoulda/action_controller/matchers/filter_param_matcher.rb#33
  def description; end

  # source://shoulda//lib/shoulda/action_controller/matchers/filter_param_matcher.rb#25
  def failure_message; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/filter_param_matcher.rb#20
  def matches?(controller); end

  # source://shoulda//lib/shoulda/action_controller/matchers/filter_param_matcher.rb#29
  def negative_failure_message; end

  private

  # source://shoulda//lib/shoulda/action_controller/matchers/filter_param_matcher.rb#56
  def filtered_controller_value; end

  # source://shoulda//lib/shoulda/action_controller/matchers/filter_param_matcher.rb#62
  def filtered_request_value; end

  # source://shoulda//lib/shoulda/action_controller/matchers/filter_param_matcher.rb#48
  def filtered_value; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/filter_param_matcher.rb#44
  def filters_key?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/filter_param_matcher.rb#39
  def filters_params?; end

  # source://shoulda//lib/shoulda/action_controller/matchers/filter_param_matcher.rb#67
  def request; end
end

# source://shoulda//lib/shoulda/action_controller/matchers/redirect_to_matcher.rb#15
class Shoulda::ActionController::Matchers::RedirectToMatcher
  # @return [RedirectToMatcher] a new instance of RedirectToMatcher
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/redirect_to_matcher.rb#17
  def initialize(url_or_description, context, &block); end

  # source://shoulda//lib/shoulda/action_controller/matchers/redirect_to_matcher.rb#40
  def description; end

  # Returns the value of attribute failure_message.
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/redirect_to_matcher.rb#38
  def failure_message; end

  # source://shoulda//lib/shoulda/action_controller/matchers/redirect_to_matcher.rb#28
  def in_context(context); end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/redirect_to_matcher.rb#33
  def matches?(controller); end

  # Returns the value of attribute negative_failure_message.
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/redirect_to_matcher.rb#38
  def negative_failure_message; end

  private

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/redirect_to_matcher.rb#46
  def redirects_to_url?; end
end

# source://shoulda//lib/shoulda/action_controller/matchers/render_template_matcher.rb#14
class Shoulda::ActionController::Matchers::RenderTemplateMatcher
  # @return [RenderTemplateMatcher] a new instance of RenderTemplateMatcher
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/render_template_matcher.rb#16
  def initialize(template, context); end

  # source://shoulda//lib/shoulda/action_controller/matchers/render_template_matcher.rb#28
  def description; end

  # Returns the value of attribute failure_message.
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/render_template_matcher.rb#26
  def failure_message; end

  # source://shoulda//lib/shoulda/action_controller/matchers/render_template_matcher.rb#32
  def in_context(context); end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/render_template_matcher.rb#21
  def matches?(controller); end

  # Returns the value of attribute negative_failure_message.
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/render_template_matcher.rb#26
  def negative_failure_message; end

  private

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/render_template_matcher.rb#39
  def renders_template?; end
end

# source://shoulda//lib/shoulda/action_controller/matchers/render_with_layout_matcher.rb#16
class Shoulda::ActionController::Matchers::RenderWithLayout
  # @return [RenderWithLayout] a new instance of RenderWithLayout
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/render_with_layout_matcher.rb#18
  def initialize(expected_layout); end

  # source://shoulda//lib/shoulda/action_controller/matchers/render_with_layout_matcher.rb#42
  def description; end

  # source://shoulda//lib/shoulda/action_controller/matchers/render_with_layout_matcher.rb#34
  def failure_message; end

  # Used to provide access to layouts recorded by
  # ActionController::TemplateAssertions in Rails 3
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/render_with_layout_matcher.rb#24
  def in_context(context); end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/render_with_layout_matcher.rb#29
  def matches?(controller); end

  # source://shoulda//lib/shoulda/action_controller/matchers/render_with_layout_matcher.rb#38
  def negative_failure_message; end

  private

  # source://shoulda//lib/shoulda/action_controller/matchers/render_with_layout_matcher.rb#82
  def expectation; end

  # source://shoulda//lib/shoulda/action_controller/matchers/render_with_layout_matcher.rb#76
  def recorded_layouts; end

  # source://shoulda//lib/shoulda/action_controller/matchers/render_with_layout_matcher.rb#63
  def rendered_layouts; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/render_with_layout_matcher.rb#58
  def rendered_with_expected_layout?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/render_with_layout_matcher.rb#54
  def rendered_with_layout?; end

  # source://shoulda//lib/shoulda/action_controller/matchers/render_with_layout_matcher.rb#86
  def result; end
end

# source://shoulda//lib/shoulda/action_controller/matchers/respond_with_content_type_matcher.rb#24
class Shoulda::ActionController::Matchers::RespondWithContentTypeMatcher
  # @return [RespondWithContentTypeMatcher] a new instance of RespondWithContentTypeMatcher
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/respond_with_content_type_matcher.rb#26
  def initialize(content_type); end

  # source://shoulda//lib/shoulda/action_controller/matchers/respond_with_content_type_matcher.rb#34
  def description; end

  # source://shoulda//lib/shoulda/action_controller/matchers/respond_with_content_type_matcher.rb#47
  def failure_message; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/respond_with_content_type_matcher.rb#38
  def matches?(controller); end

  # source://shoulda//lib/shoulda/action_controller/matchers/respond_with_content_type_matcher.rb#51
  def negative_failure_message; end

  protected

  # source://shoulda//lib/shoulda/action_controller/matchers/respond_with_content_type_matcher.rb#65
  def expectation; end

  # source://shoulda//lib/shoulda/action_controller/matchers/respond_with_content_type_matcher.rb#61
  def lookup_by_extension(extension); end

  # source://shoulda//lib/shoulda/action_controller/matchers/respond_with_content_type_matcher.rb#57
  def response_content_type; end
end

# source://shoulda//lib/shoulda/action_controller/matchers/respond_with_matcher.rb#22
class Shoulda::ActionController::Matchers::RespondWithMatcher
  # @return [RespondWithMatcher] a new instance of RespondWithMatcher
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/respond_with_matcher.rb#24
  def initialize(status); end

  # source://shoulda//lib/shoulda/action_controller/matchers/respond_with_matcher.rb#41
  def description; end

  # source://shoulda//lib/shoulda/action_controller/matchers/respond_with_matcher.rb#33
  def failure_message; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/respond_with_matcher.rb#28
  def matches?(controller); end

  # source://shoulda//lib/shoulda/action_controller/matchers/respond_with_matcher.rb#37
  def negative_failure_message; end

  protected

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/respond_with_matcher.rb#47
  def correct_status_code?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/respond_with_matcher.rb#51
  def correct_status_code_range?; end

  # source://shoulda//lib/shoulda/action_controller/matchers/respond_with_matcher.rb#77
  def expectation; end

  # source://shoulda//lib/shoulda/action_controller/matchers/respond_with_matcher.rb#56
  def response_code; end

  # source://shoulda//lib/shoulda/action_controller/matchers/respond_with_matcher.rb#60
  def symbol_to_status_code(potential_symbol); end
end

# source://shoulda//lib/shoulda/action_controller/matchers/route_matcher.rb#29
class Shoulda::ActionController::Matchers::RouteMatcher
  # @return [RouteMatcher] a new instance of RouteMatcher
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/route_matcher.rb#31
  def initialize(method, path, context); end

  # source://shoulda//lib/shoulda/action_controller/matchers/route_matcher.rb#56
  def description; end

  # Returns the value of attribute failure_message.
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/route_matcher.rb#54
  def failure_message; end

  # source://shoulda//lib/shoulda/action_controller/matchers/route_matcher.rb#43
  def in_context(context); end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/route_matcher.rb#48
  def matches?(controller); end

  # Returns the value of attribute negative_failure_message.
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/route_matcher.rb#54
  def negative_failure_message; end

  # source://shoulda//lib/shoulda/action_controller/matchers/route_matcher.rb#37
  def to(params); end

  private

  # source://shoulda//lib/shoulda/action_controller/matchers/route_matcher.rb#62
  def guess_controller!; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/route_matcher.rb#72
  def route_recognized?; end

  # source://shoulda//lib/shoulda/action_controller/matchers/route_matcher.rb#66
  def stringify_params!; end
end

# source://shoulda//lib/shoulda/action_controller/matchers/set_session_matcher.rb#16
class Shoulda::ActionController::Matchers::SetSessionMatcher
  # @return [SetSessionMatcher] a new instance of SetSessionMatcher
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/set_session_matcher.rb#18
  def initialize(key); end

  # source://shoulda//lib/shoulda/action_controller/matchers/set_session_matcher.rb#42
  def description; end

  # source://shoulda//lib/shoulda/action_controller/matchers/set_session_matcher.rb#34
  def failure_message; end

  # source://shoulda//lib/shoulda/action_controller/matchers/set_session_matcher.rb#48
  def in_context(context); end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/set_session_matcher.rb#28
  def matches?(controller); end

  # source://shoulda//lib/shoulda/action_controller/matchers/set_session_matcher.rb#38
  def negative_failure_message; end

  # source://shoulda//lib/shoulda/action_controller/matchers/set_session_matcher.rb#22
  def to(value = T.unsafe(nil), &block); end

  private

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/set_session_matcher.rb#63
  def assigned_correct_value?; end

  # source://shoulda//lib/shoulda/action_controller/matchers/set_session_matcher.rb#68
  def assigned_value; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/set_session_matcher.rb#55
  def assigned_value?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/set_session_matcher.rb#59
  def cleared_value?; end

  # source://shoulda//lib/shoulda/action_controller/matchers/set_session_matcher.rb#80
  def expectation; end

  # source://shoulda//lib/shoulda/action_controller/matchers/set_session_matcher.rb#86
  def result; end

  # source://shoulda//lib/shoulda/action_controller/matchers/set_session_matcher.rb#72
  def session; end
end

# source://shoulda//lib/shoulda/action_controller/matchers/set_the_flash_matcher.rb#19
class Shoulda::ActionController::Matchers::SetTheFlashMatcher
  # source://shoulda//lib/shoulda/action_controller/matchers/set_the_flash_matcher.rb#38
  def description; end

  # Returns the value of attribute failure_message.
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/set_the_flash_matcher.rb#44
  def failure_message; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/set_the_flash_matcher.rb#31
  def matches?(controller); end

  # Returns the value of attribute negative_failure_message.
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/set_the_flash_matcher.rb#48
  def negative_failure_message; end

  # source://shoulda//lib/shoulda/action_controller/matchers/set_the_flash_matcher.rb#26
  def now; end

  # source://shoulda//lib/shoulda/action_controller/matchers/set_the_flash_matcher.rb#21
  def to(value); end

  private

  # source://shoulda//lib/shoulda/action_controller/matchers/set_the_flash_matcher.rb#81
  def expectation; end

  # source://shoulda//lib/shoulda/action_controller/matchers/set_the_flash_matcher.rb#68
  def flash; end

  # source://shoulda//lib/shoulda/action_controller/matchers/set_the_flash_matcher.rb#88
  def flash_description; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/set_the_flash_matcher.rb#63
  def regexp_value_matches?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/set_the_flash_matcher.rb#54
  def sets_the_flash?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_controller/matchers/set_the_flash_matcher.rb#58
  def string_value_matches?; end
end

# source://shoulda//lib/shoulda/action_mailer/matchers/have_sent_email.rb#2
module Shoulda::ActionMailer; end

# = Matchers for your mailers
#
# This matcher will test that email is sent properly
#
#   describe User do
#     it { should have_sent_email.with_subject(/is spam$/) }
#     it { should have_sent_email.from('do-not-reply@example.com') }
#     it { should have_sent_email.with_body(/is spam\./) }
#     it { should have_sent_email.to('myself@me.com') }
#     it { should have_sent_email.with_subject(/spam/).
#                                 from('do-not-reply@example.com').
#                                 with_body(/spam/).
#                                 to('myself@me.com') }
#   end
#
# source://shoulda//lib/shoulda/action_mailer/matchers/have_sent_email.rb#3
module Shoulda::ActionMailer::Matchers
  # The right email is sent.
  #
  #   it { should have_sent_email.with_subject(/is spam$/) }
  #   it { should have_sent_email.from('do-not-reply@example.com') }
  #   it { should have_sent_email.with_body(/is spam\./) }
  #   it { should have_sent_email.to('myself@me.com') }
  #   it { should have_sent_email.with_subject(/spam/).
  #                               from('do-not-reply@example.com').
  #                               with_body(/spam/).
  #                               to('myself@me.com') }
  #
  # source://shoulda//lib/shoulda/action_mailer/matchers/have_sent_email.rb#15
  def have_sent_email; end
end

# source://shoulda//lib/shoulda/action_mailer/matchers/have_sent_email.rb#19
class Shoulda::ActionMailer::Matchers::HaveSentEmailMatcher
  # @return [HaveSentEmailMatcher] a new instance of HaveSentEmailMatcher
  #
  # source://shoulda//lib/shoulda/action_mailer/matchers/have_sent_email.rb#21
  def initialize; end

  # source://shoulda//lib/shoulda/action_mailer/matchers/have_sent_email.rb#64
  def description; end

  # source://shoulda//lib/shoulda/action_mailer/matchers/have_sent_email.rb#56
  def failure_message; end

  # source://shoulda//lib/shoulda/action_mailer/matchers/have_sent_email.rb#29
  def from(sender); end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_mailer/matchers/have_sent_email.rb#44
  def matches?(subject); end

  # source://shoulda//lib/shoulda/action_mailer/matchers/have_sent_email.rb#60
  def negative_failure_message; end

  # source://shoulda//lib/shoulda/action_mailer/matchers/have_sent_email.rb#39
  def to(recipient); end

  # source://shoulda//lib/shoulda/action_mailer/matchers/have_sent_email.rb#34
  def with_body(body); end

  # source://shoulda//lib/shoulda/action_mailer/matchers/have_sent_email.rb#24
  def with_subject(email_subject); end

  private

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/action_mailer/matchers/have_sent_email.rb#85
  def anything_failed?; end

  # source://shoulda//lib/shoulda/action_mailer/matchers/have_sent_email.rb#70
  def expectation; end

  # source://shoulda//lib/shoulda/action_mailer/matchers/have_sent_email.rb#79
  def inspect_deliveries; end

  # source://shoulda//lib/shoulda/action_mailer/matchers/have_sent_email.rb#89
  def regexp_or_string_match(a_string, a_regexp_or_string); end

  # source://shoulda//lib/shoulda/action_mailer/matchers/have_sent_email.rb#98
  def regexp_or_string_match_in_array(an_array, a_regexp_or_string); end
end

# source://shoulda//lib/shoulda/active_record/helpers.rb#2
module Shoulda::ActiveRecord; end

# source://shoulda//lib/shoulda/active_record/helpers.rb#3
module Shoulda::ActiveRecord::Helpers
  # Helper method that determines the default error message used by Active
  # Record.  Works for both existing Rails 2.1 and Rails 2.2 with the newly
  # introduced I18n module used for localization.
  #
  #   default_error_message(:blank)
  #   default_error_message(:too_short, :count => 5)
  #   default_error_message(:too_long, :count => 60)
  #
  # source://shoulda//lib/shoulda/active_record/helpers.rb#18
  def default_error_message(key, values = T.unsafe(nil)); end

  # source://shoulda//lib/shoulda/active_record/helpers.rb#4
  def pretty_error_messages(obj); end
end

# = Matchers for your active record models
#
# These matchers will test most of the validations and associations for your
# ActiveRecord models.
#
#   describe User do
#     it { should validate_presence_of(:name) }
#     it { should validate_presence_of(:phone_number) }
#     %w(abcd 1234).each do |value|
#       it { should_not allow_value(value).for(:phone_number) }
#     end
#     it { should allow_value("(123) 456-7890").for(:phone_number) }
#     it { should_not allow_mass_assignment_of(:password) }
#     it { should have_one(:profile) }
#     it { should have_many(:dogs) }
#     it { should have_many(:messes).through(:dogs) }
#     it { should belong_to(:lover) }
#   end
#
# source://shoulda//lib/shoulda/active_record/matchers/validation_matcher.rb#3
module Shoulda::ActiveRecord::Matchers
  # Ensures that the attribute can be set on mass update.
  #
  #   it { should_not allow_mass_assignment_of(:password) }
  #   it { should allow_mass_assignment_of(:first_name) }
  #
  # source://shoulda//lib/shoulda/active_record/matchers/allow_mass_assignment_of_matcher.rb#10
  def allow_mass_assignment_of(value); end

  # Ensures that the attribute can be set to the given value.
  #
  # Options:
  # * <tt>with_message</tt> - value the test expects to find in
  #   <tt>errors.on(:attribute)</tt>. Regexp or string. If omitted,
  #   the test looks for any errors in <tt>errors.on(:attribute)</tt>.
  #
  # Example:
  #   it { should_not allow_value('bad').for(:isbn) }
  #   it { should allow_value("isbn 1 2345 6789 0").for(:isbn) }
  #
  # source://shoulda//lib/shoulda/active_record/matchers/allow_value_matcher.rb#16
  def allow_value(value); end

  # Ensure that the belongs_to relationship exists.
  #
  #   it { should belong_to(:parent) }
  #
  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#9
  def belong_to(name); end

  # Ensure that the attribute's value is in the range specified
  #
  # Options:
  # * <tt>in_range</tt> - the range of allowed values for this attribute
  # * <tt>with_low_message</tt> - value the test expects to find in
  #   <tt>errors.on(:attribute)</tt>. Regexp or string. Defaults to the
  #   translation for :inclusion.
  # * <tt>with_high_message</tt> - value the test expects to find in
  #   <tt>errors.on(:attribute)</tt>. Regexp or string. Defaults to the
  #   translation for :inclusion.
  #
  # Example:
  #   it { should ensure_inclusion_of(:age).in_range(0..100) }
  #
  # source://shoulda//lib/shoulda/active_record/matchers/ensure_inclusion_of_matcher.rb#19
  def ensure_inclusion_of(attr); end

  # Ensures that the length of the attribute is validated.
  #
  # Options:
  # * <tt>is_at_least</tt> - minimum length of this attribute
  # * <tt>is_at_most</tt> - maximum length of this attribute
  # * <tt>is_equal_to</tt> - exact requred length of this attribute
  # * <tt>with_short_message</tt> - value the test expects to find in
  #   <tt>errors.on(:attribute)</tt>. Regexp or string.  Defaults to the
  #   translation for :too_short.
  # * <tt>with_long_message</tt> - value the test expects to find in
  #   <tt>errors.on(:attribute)</tt>. Regexp or string.  Defaults to the
  #   translation for :too_long.
  # * <tt>with_message</tt> - value the test expects to find in
  #   <tt>errors.on(:attribute)</tt>. Regexp or string.  Defaults to the
  #   translation for :wrong_length. Used in conjunction with
  #   <tt>is_equal_to</tt>.
  #
  # Examples:
  #   it { should ensure_length_of(:password).
  #                 is_at_least(6).
  #                 is_at_most(20) }
  #   it { should ensure_length_of(:name).
  #                 is_at_least(3).
  #                 with_short_message(/not long enough/) }
  #   it { should ensure_length_of(:ssn).
  #                 is_equal_to(9).
  #                 with_message(/is invalid/) }
  #
  # source://shoulda//lib/shoulda/active_record/matchers/ensure_length_of_matcher.rb#32
  def ensure_length_of(attr); end

  # Ensures that the has_and_belongs_to_many relationship exists, and that
  # the join table is in place.
  #
  #   it { should have_and_belong_to_many(:posts) }
  #
  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#51
  def have_and_belong_to_many(name); end

  # Ensures the database column exists.
  #
  # Options:
  # * <tt>of_type</tt> - db column type (:integer, :string, etc.)
  # * <tt>with_options</tt> - same options available in migrations
  #   (:default, :null, :limit, :precision, :scale)
  #
  # Examples:
  #   it { should_not have_db_column(:admin).of_type(:boolean) }
  #   it { should have_db_column(:salary).
  #                 of_type(:decimal).
  #                 with_options(:precision => 10, :scale => 2) }
  #
  # source://shoulda//lib/shoulda/active_record/matchers/have_db_column_matcher.rb#18
  def have_db_column(column); end

  # Ensures that there are DB indices on the given columns or tuples of
  # columns.
  #
  # Options:
  # * <tt>unique</tt> - whether or not the index has a unique
  #   constraint. Use <tt>true</tt> to explicitly test for a unique
  #   constraint.  Use <tt>false</tt> to explicitly test for a non-unique
  #   constraint. Use <tt>nil</tt> if you don't care whether the index is
  #   unique or not.  Default = <tt>nil</tt>
  #
  # Examples:
  #
  #   it { should have_db_index(:age) }
  #   it { should have_db_index([:commentable_type, :commentable_id]) }
  #   it { should have_db_index(:ssn).unique(true) }
  #
  # source://shoulda//lib/shoulda/active_record/matchers/have_db_index_matcher.rb#21
  def have_db_index(columns); end

  # Ensures that the has_many relationship exists.  Will also test that the
  # associated table has the required columns.  Works with polymorphic
  # associations.
  #
  # Options:
  # * <tt>through</tt> - association name for <tt>has_many :through</tt>
  # * <tt>dependent</tt> - tests that the association makes use of the
  #   dependent option.
  #
  # Example:
  #   it { should have_many(:friends) }
  #   it { should have_many(:enemies).through(:friends) }
  #   it { should have_many(:enemies).dependent(:destroy) }
  #
  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#27
  def have_many(name); end

  # Ensure that the has_one relationship exists.  Will also test that the
  # associated table has the required columns.  Works with polymorphic
  # associations.
  #
  # Options:
  # * <tt>:dependent</tt> - tests that the association makes use of the
  #   dependent option.
  #
  # Example:
  #   it { should have_one(:god) } # unless hindu
  #
  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#42
  def have_one(name); end

  # Ensures that the attribute cannot be changed once the record has been
  # created.
  #
  #   it { should have_readonly_attributes(:password) }
  #
  # source://shoulda//lib/shoulda/active_record/matchers/have_readonly_attribute_matcher.rb#10
  def have_readonly_attribute(value); end

  # Ensures that the model cannot be saved the given attribute is not
  # accepted.
  #
  # Options:
  # * <tt>with_message</tt> - value the test expects to find in
  #   <tt>errors.on(:attribute)</tt>. Regexp or string.  Defaults to the
  #   translation for <tt>:accepted</tt>.
  #
  # Example:
  #   it { should validate_acceptance_of(:eula) }
  #
  # source://shoulda//lib/shoulda/active_record/matchers/validate_acceptance_of_matcher.rb#16
  def validate_acceptance_of(attr); end

  # Ensures that the model is not valid if the given attribute is not
  # formatted correctly.
  #
  # Options:
  # * <tt>with_message</tt> - value the test expects to find in
  #   <tt>errors.on(:attribute)</tt>. <tt>Regexp</tt> or <tt>String</tt>.
  #   Defaults to the translation for <tt>:blank</tt>.
  # * <tt>with(string to test against)</tt>
  # * <tt>not_with(string to test against)</tt>
  #
  # Examples:
  #   it { should validate_format_of(:name).
  #                 with('12345').
  #                 with_message(/is not optional/) }
  #   it { should validate_format_of(:name).
  #                 not_with('12D45').
  #                 with_message(/is not optional/) }
  #
  # source://shoulda//lib/shoulda/active_record/matchers/validate_format_of_matcher.rb#23
  def validate_format_of(attr); end

  # Ensure that the attribute is numeric
  #
  # Options:
  # * <tt>with_message</tt> - value the test expects to find in
  #   <tt>errors.on(:attribute)</tt>. Regexp or string.  Defaults to the
  #   translation for <tt>:not_a_number</tt>.
  #
  # Example:
  #   it { should validate_numericality_of(:age) }
  #
  # source://shoulda//lib/shoulda/active_record/matchers/validate_numericality_of_matcher.rb#15
  def validate_numericality_of(attr); end

  # Ensures that the model is not valid if the given attribute is not
  # present.
  #
  # Options:
  # * <tt>with_message</tt> - value the test expects to find in
  #   <tt>errors.on(:attribute)</tt>. <tt>Regexp</tt> or <tt>String</tt>.
  #   Defaults to the translation for <tt>:blank</tt>.
  #
  # Examples:
  #   it { should validate_presence_of(:name) }
  #   it { should validate_presence_of(:name).
  #                 with_message(/is not optional/) }
  #
  # source://shoulda//lib/shoulda/active_record/matchers/validate_presence_of_matcher.rb#18
  def validate_presence_of(attr); end

  # Ensures that the model is invalid if the given attribute is not unique.
  #
  # Internally, this uses values from existing records to test validations,
  # so this will always fail if you have not saved at least one record for
  # the model being tested, like so:
  #
  #   describe User do
  #     before(:each) { User.create!(:email => 'address@example.com') }
  #     it { should validate_uniqueness_of(:email) }
  #   end
  #
  # Options:
  #
  # * <tt>with_message</tt> - value the test expects to find in
  #   <tt>errors.on(:attribute)</tt>. <tt>Regexp</tt> or <tt>String</tt>.
  #   Defaults to the translation for <tt>:taken</tt>.
  # * <tt>scoped_to</tt> - field(s) to scope the uniqueness to.
  # * <tt>case_insensitive</tt> - ensures that the validation does not
  #   check case. Off by default. Ignored by non-text attributes.
  #
  # Examples:
  #   it { should validate_uniqueness_of(:keyword) }
  #   it { should validate_uniqueness_of(:keyword).with_message(/dup/) }
  #   it { should validate_uniqueness_of(:email).scoped_to(:name) }
  #   it { should validate_uniqueness_of(:email).
  #                 scoped_to(:first_name, :last_name) }
  #   it { should validate_uniqueness_of(:keyword).case_insensitive }
  #
  # source://shoulda//lib/shoulda/active_record/matchers/validate_uniqueness_of_matcher.rb#33
  def validate_uniqueness_of(attr); end
end

# source://shoulda//lib/shoulda/active_record/matchers/allow_mass_assignment_of_matcher.rb#14
class Shoulda::ActiveRecord::Matchers::AllowMassAssignmentOfMatcher
  # @return [AllowMassAssignmentOfMatcher] a new instance of AllowMassAssignmentOfMatcher
  #
  # source://shoulda//lib/shoulda/active_record/matchers/allow_mass_assignment_of_matcher.rb#16
  def initialize(attribute); end

  # source://shoulda//lib/shoulda/active_record/matchers/allow_mass_assignment_of_matcher.rb#49
  def description; end

  # Returns the value of attribute failure_message.
  #
  # source://shoulda//lib/shoulda/active_record/matchers/allow_mass_assignment_of_matcher.rb#47
  def failure_message; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/allow_mass_assignment_of_matcher.rb#20
  def matches?(subject); end

  # Returns the value of attribute negative_failure_message.
  #
  # source://shoulda//lib/shoulda/active_record/matchers/allow_mass_assignment_of_matcher.rb#47
  def negative_failure_message; end

  private

  # source://shoulda//lib/shoulda/active_record/matchers/allow_mass_assignment_of_matcher.rb#59
  def accessible_attributes; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/allow_mass_assignment_of_matcher.rb#67
  def attr_mass_assignable?; end

  # source://shoulda//lib/shoulda/active_record/matchers/allow_mass_assignment_of_matcher.rb#75
  def class_name; end

  # source://shoulda//lib/shoulda/active_record/matchers/allow_mass_assignment_of_matcher.rb#55
  def protected_attributes; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/allow_mass_assignment_of_matcher.rb#63
  def whitelisting?; end
end

# source://shoulda//lib/shoulda/active_record/matchers/allow_value_matcher.rb#20
class Shoulda::ActiveRecord::Matchers::AllowValueMatcher
  include ::Shoulda::ActiveRecord::Helpers

  # @return [AllowValueMatcher] a new instance of AllowValueMatcher
  #
  # source://shoulda//lib/shoulda/active_record/matchers/allow_value_matcher.rb#23
  def initialize(value); end

  # source://shoulda//lib/shoulda/active_record/matchers/allow_value_matcher.rb#54
  def description; end

  # source://shoulda//lib/shoulda/active_record/matchers/allow_value_matcher.rb#46
  def failure_message; end

  # source://shoulda//lib/shoulda/active_record/matchers/allow_value_matcher.rb#27
  def for(attribute); end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/allow_value_matcher.rb#37
  def matches?(instance); end

  # source://shoulda//lib/shoulda/active_record/matchers/allow_value_matcher.rb#50
  def negative_failure_message; end

  # source://shoulda//lib/shoulda/active_record/matchers/allow_value_matcher.rb#32
  def with_message(message); end

  private

  # source://shoulda//lib/shoulda/active_record/matchers/allow_value_matcher.rb#99
  def error_description; end

  # source://shoulda//lib/shoulda/active_record/matchers/allow_value_matcher.rb#67
  def errors_for_attribute(instance, attribute); end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/allow_value_matcher.rb#60
  def errors_match?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/allow_value_matcher.rb#75
  def errors_match_regexp?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/allow_value_matcher.rb#84
  def errors_match_string?; end

  # source://shoulda//lib/shoulda/active_record/matchers/allow_value_matcher.rb#93
  def expectation; end
end

# source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#55
class Shoulda::ActiveRecord::Matchers::AssociationMatcher
  # @return [AssociationMatcher] a new instance of AssociationMatcher
  #
  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#56
  def initialize(macro, name); end

  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#66
  def dependent(dependent); end

  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#89
  def description; end

  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#81
  def failure_message; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#71
  def matches?(subject); end

  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#85
  def negative_failure_message; end

  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#61
  def through(through); end

  protected

  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#189
  def associated_class; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#98
  def association_exists?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#120
  def belongs_foreign_key_missing?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#172
  def class_has_foreign_key?(klass); end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#153
  def dependent_correct?; end

  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#209
  def expectation; end

  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#193
  def foreign_key; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#116
  def foreign_key_exists?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#124
  def has_foreign_key_missing?; end

  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#185
  def join_table; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#162
  def join_table_exists?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#107
  def macro_correct?; end

  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#213
  def macro_description; end

  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#181
  def model_class; end

  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#201
  def reflection; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#197
  def through?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#143
  def through_association_correct?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#134
  def through_association_exists?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#130
  def through_association_valid?; end

  # source://shoulda//lib/shoulda/active_record/matchers/association_matcher.rb#205
  def through_reflection; end
end

# source://shoulda//lib/shoulda/active_record/matchers/ensure_inclusion_of_matcher.rb#23
class Shoulda::ActiveRecord::Matchers::EnsureInclusionOfMatcher < ::Shoulda::ActiveRecord::Matchers::ValidationMatcher
  # source://shoulda//lib/shoulda/active_record/matchers/ensure_inclusion_of_matcher.rb#50
  def description; end

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_inclusion_of_matcher.rb#25
  def in_range(range); end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/ensure_inclusion_of_matcher.rb#54
  def matches?(subject); end

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_inclusion_of_matcher.rb#45
  def with_high_message(message); end

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_inclusion_of_matcher.rb#40
  def with_low_message(message); end

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_inclusion_of_matcher.rb#32
  def with_message(message); end

  private

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_inclusion_of_matcher.rb#80
  def allows_maximum_value; end

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_inclusion_of_matcher.rb#76
  def allows_minimum_value; end

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_inclusion_of_matcher.rb#72
  def disallows_higher_value; end

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_inclusion_of_matcher.rb#68
  def disallows_lower_value; end
end

# source://shoulda//lib/shoulda/active_record/matchers/ensure_length_of_matcher.rb#36
class Shoulda::ActiveRecord::Matchers::EnsureLengthOfMatcher < ::Shoulda::ActiveRecord::Matchers::ValidationMatcher
  include ::Shoulda::ActiveRecord::Helpers

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_length_of_matcher.rb#69
  def description; end

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_length_of_matcher.rb#39
  def is_at_least(length); end

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_length_of_matcher.rb#45
  def is_at_most(length); end

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_length_of_matcher.rb#51
  def is_equal_to(length); end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/ensure_length_of_matcher.rb#84
  def matches?(subject); end

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_length_of_matcher.rb#64
  def with_long_message(message); end

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_length_of_matcher.rb#58
  def with_message(message); end

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_length_of_matcher.rb#58
  def with_short_message(message); end

  private

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_length_of_matcher.rb#126
  def allows_length_of(length, message); end

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_length_of_matcher.rb#122
  def allows_maximum_length; end

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_length_of_matcher.rb#118
  def allows_minimum_length; end

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_length_of_matcher.rb#114
  def disallows_higher_length; end

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_length_of_matcher.rb#130
  def disallows_length_of(length, message); end

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_length_of_matcher.rb#108
  def disallows_lower_length; end

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_length_of_matcher.rb#134
  def string_of_length(length); end

  # source://shoulda//lib/shoulda/active_record/matchers/ensure_length_of_matcher.rb#96
  def translate_messages!; end
end

# source://shoulda//lib/shoulda/active_record/matchers/have_db_column_matcher.rb#22
class Shoulda::ActiveRecord::Matchers::HaveDbColumnMatcher
  # @return [HaveDbColumnMatcher] a new instance of HaveDbColumnMatcher
  #
  # source://shoulda//lib/shoulda/active_record/matchers/have_db_column_matcher.rb#23
  def initialize(macro, column); end

  # source://shoulda//lib/shoulda/active_record/matchers/have_db_column_matcher.rb#61
  def description; end

  # source://shoulda//lib/shoulda/active_record/matchers/have_db_column_matcher.rb#53
  def failure_message; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/have_db_column_matcher.rb#42
  def matches?(subject); end

  # source://shoulda//lib/shoulda/active_record/matchers/have_db_column_matcher.rb#57
  def negative_failure_message; end

  # source://shoulda//lib/shoulda/active_record/matchers/have_db_column_matcher.rb#28
  def of_type(column_type); end

  # source://shoulda//lib/shoulda/active_record/matchers/have_db_column_matcher.rb#33
  def with_options(opts = T.unsafe(nil)); end

  protected

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/have_db_column_matcher.rb#75
  def column_exists?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/have_db_column_matcher.rb#84
  def correct_column_type?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/have_db_column_matcher.rb#119
  def correct_default?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/have_db_column_matcher.rb#107
  def correct_limit?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/have_db_column_matcher.rb#131
  def correct_null?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/have_db_column_matcher.rb#95
  def correct_precision?; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/have_db_column_matcher.rb#143
  def correct_scale?; end

  # source://shoulda//lib/shoulda/active_record/matchers/have_db_column_matcher.rb#162
  def expectation; end

  # source://shoulda//lib/shoulda/active_record/matchers/have_db_column_matcher.rb#154
  def matched_column; end

  # source://shoulda//lib/shoulda/active_record/matchers/have_db_column_matcher.rb#158
  def model_class; end
end

# source://shoulda//lib/shoulda/active_record/matchers/have_db_index_matcher.rb#25
class Shoulda::ActiveRecord::Matchers::HaveDbIndexMatcher
  # @return [HaveDbIndexMatcher] a new instance of HaveDbIndexMatcher
  #
  # source://shoulda//lib/shoulda/active_record/matchers/have_db_index_matcher.rb#26
  def initialize(macro, columns); end

  # source://shoulda//lib/shoulda/active_record/matchers/have_db_index_matcher.rb#49
  def description; end

  # source://shoulda//lib/shoulda/active_record/matchers/have_db_index_matcher.rb#41
  def failure_message; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/have_db_index_matcher.rb#36
  def matches?(subject); end

  # source://shoulda//lib/shoulda/active_record/matchers/have_db_index_matcher.rb#45
  def negative_failure_message; end

  # source://shoulda//lib/shoulda/active_record/matchers/have_db_index_matcher.rb#31
  def unique(unique); end

  protected

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/have_db_index_matcher.rb#59
  def correct_unique?; end

  # source://shoulda//lib/shoulda/active_record/matchers/have_db_index_matcher.rb#86
  def expectation; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/have_db_index_matcher.rb#55
  def index_exists?; end

  # source://shoulda//lib/shoulda/active_record/matchers/have_db_index_matcher.rb#90
  def index_type; end

  # source://shoulda//lib/shoulda/active_record/matchers/have_db_index_matcher.rb#82
  def indexes; end

  # source://shoulda//lib/shoulda/active_record/matchers/have_db_index_matcher.rb#70
  def matched_index; end

  # source://shoulda//lib/shoulda/active_record/matchers/have_db_index_matcher.rb#74
  def model_class; end

  # source://shoulda//lib/shoulda/active_record/matchers/have_db_index_matcher.rb#101
  def normalize_columns_to_array(columns); end

  # source://shoulda//lib/shoulda/active_record/matchers/have_db_index_matcher.rb#78
  def table_name; end
end

# source://shoulda//lib/shoulda/active_record/matchers/have_readonly_attribute_matcher.rb#14
class Shoulda::ActiveRecord::Matchers::HaveReadonlyAttributeMatcher
  # @return [HaveReadonlyAttributeMatcher] a new instance of HaveReadonlyAttributeMatcher
  #
  # source://shoulda//lib/shoulda/active_record/matchers/have_readonly_attribute_matcher.rb#16
  def initialize(attribute); end

  # source://shoulda//lib/shoulda/active_record/matchers/have_readonly_attribute_matcher.rb#41
  def description; end

  # Returns the value of attribute failure_message.
  #
  # source://shoulda//lib/shoulda/active_record/matchers/have_readonly_attribute_matcher.rb#39
  def failure_message; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/have_readonly_attribute_matcher.rb#20
  def matches?(subject); end

  # Returns the value of attribute negative_failure_message.
  #
  # source://shoulda//lib/shoulda/active_record/matchers/have_readonly_attribute_matcher.rb#39
  def negative_failure_message; end

  private

  # source://shoulda//lib/shoulda/active_record/matchers/have_readonly_attribute_matcher.rb#51
  def class_name; end

  # source://shoulda//lib/shoulda/active_record/matchers/have_readonly_attribute_matcher.rb#47
  def readonly_attributes; end
end

# source://shoulda//lib/shoulda/active_record/matchers/validate_acceptance_of_matcher.rb#20
class Shoulda::ActiveRecord::Matchers::ValidateAcceptanceOfMatcher < ::Shoulda::ActiveRecord::Matchers::ValidationMatcher
  # source://shoulda//lib/shoulda/active_record/matchers/validate_acceptance_of_matcher.rb#33
  def description; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/validate_acceptance_of_matcher.rb#27
  def matches?(subject); end

  # source://shoulda//lib/shoulda/active_record/matchers/validate_acceptance_of_matcher.rb#22
  def with_message(message); end
end

# source://shoulda//lib/shoulda/active_record/matchers/validate_format_of_matcher.rb#27
class Shoulda::ActiveRecord::Matchers::ValidateFormatOfMatcher < ::Shoulda::ActiveRecord::Matchers::ValidationMatcher
  # @return [ValidateFormatOfMatcher] a new instance of ValidateFormatOfMatcher
  #
  # source://shoulda//lib/shoulda/active_record/matchers/validate_format_of_matcher.rb#29
  def initialize(attribute); end

  # source://shoulda//lib/shoulda/active_record/matchers/validate_format_of_matcher.rb#57
  def description; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/validate_format_of_matcher.rb#50
  def matches?(subject); end

  # source://shoulda//lib/shoulda/active_record/matchers/validate_format_of_matcher.rb#44
  def not_with(value); end

  # source://shoulda//lib/shoulda/active_record/matchers/validate_format_of_matcher.rb#38
  def with(value); end

  # source://shoulda//lib/shoulda/active_record/matchers/validate_format_of_matcher.rb#33
  def with_message(message); end
end

# source://shoulda//lib/shoulda/active_record/matchers/validate_numericality_of_matcher.rb#19
class Shoulda::ActiveRecord::Matchers::ValidateNumericalityOfMatcher < ::Shoulda::ActiveRecord::Matchers::ValidationMatcher
  # source://shoulda//lib/shoulda/active_record/matchers/validate_numericality_of_matcher.rb#32
  def description; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/validate_numericality_of_matcher.rb#26
  def matches?(subject); end

  # source://shoulda//lib/shoulda/active_record/matchers/validate_numericality_of_matcher.rb#21
  def with_message(message); end
end

# source://shoulda//lib/shoulda/active_record/matchers/validate_presence_of_matcher.rb#22
class Shoulda::ActiveRecord::Matchers::ValidatePresenceOfMatcher < ::Shoulda::ActiveRecord::Matchers::ValidationMatcher
  # source://shoulda//lib/shoulda/active_record/matchers/validate_presence_of_matcher.rb#35
  def description; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/validate_presence_of_matcher.rb#29
  def matches?(subject); end

  # source://shoulda//lib/shoulda/active_record/matchers/validate_presence_of_matcher.rb#24
  def with_message(message); end

  private

  # source://shoulda//lib/shoulda/active_record/matchers/validate_presence_of_matcher.rb#41
  def blank_value; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/validate_presence_of_matcher.rb#49
  def collection?; end
end

# source://shoulda//lib/shoulda/active_record/matchers/validate_uniqueness_of_matcher.rb#37
class Shoulda::ActiveRecord::Matchers::ValidateUniquenessOfMatcher < ::Shoulda::ActiveRecord::Matchers::ValidationMatcher
  include ::Shoulda::ActiveRecord::Helpers

  # @return [ValidateUniquenessOfMatcher] a new instance of ValidateUniquenessOfMatcher
  #
  # source://shoulda//lib/shoulda/active_record/matchers/validate_uniqueness_of_matcher.rb#40
  def initialize(attribute); end

  # source://shoulda//lib/shoulda/active_record/matchers/validate_uniqueness_of_matcher.rb#54
  def case_insensitive; end

  # source://shoulda//lib/shoulda/active_record/matchers/validate_uniqueness_of_matcher.rb#59
  def description; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/validate_uniqueness_of_matcher.rb#67
  def matches?(subject); end

  # source://shoulda//lib/shoulda/active_record/matchers/validate_uniqueness_of_matcher.rb#44
  def scoped_to(*scopes); end

  # source://shoulda//lib/shoulda/active_record/matchers/validate_uniqueness_of_matcher.rb#49
  def with_message(message); end

  private

  # source://shoulda//lib/shoulda/active_record/matchers/validate_uniqueness_of_matcher.rb#135
  def class_name; end

  # source://shoulda//lib/shoulda/active_record/matchers/validate_uniqueness_of_matcher.rb#139
  def existing_value; end

  # source://shoulda//lib/shoulda/active_record/matchers/validate_uniqueness_of_matcher.rb#78
  def find_existing; end

  # source://shoulda//lib/shoulda/active_record/matchers/validate_uniqueness_of_matcher.rb#87
  def set_scoped_attributes; end

  # TODO:  There is a chance that we could change the scoped field
  # to a value that's already taken.  An alternative implementation
  # could actually find all values for scope and create a unique
  #
  # source://shoulda//lib/shoulda/active_record/matchers/validate_uniqueness_of_matcher.rb#109
  def validate_after_scope_change; end

  # source://shoulda//lib/shoulda/active_record/matchers/validate_uniqueness_of_matcher.rb#102
  def validate_attribute; end
end

# source://shoulda//lib/shoulda/active_record/matchers/validation_matcher.rb#5
class Shoulda::ActiveRecord::Matchers::ValidationMatcher
  # @return [ValidationMatcher] a new instance of ValidationMatcher
  #
  # source://shoulda//lib/shoulda/active_record/matchers/validation_matcher.rb#9
  def initialize(attribute); end

  # Returns the value of attribute failure_message.
  #
  # source://shoulda//lib/shoulda/active_record/matchers/validation_matcher.rb#7
  def failure_message; end

  # @return [Boolean]
  #
  # source://shoulda//lib/shoulda/active_record/matchers/validation_matcher.rb#17
  def matches?(subject); end

  # source://shoulda//lib/shoulda/active_record/matchers/validation_matcher.rb#13
  def negative_failure_message; end

  private

  # source://shoulda//lib/shoulda/active_record/matchers/validation_matcher.rb#24
  def allows_value_of(value, message = T.unsafe(nil)); end

  # source://shoulda//lib/shoulda/active_record/matchers/validation_matcher.rb#38
  def disallows_value_of(value, message = T.unsafe(nil)); end
end

# source://shoulda//lib/shoulda/version.rb#2
Shoulda::VERSION = T.let(T.unsafe(nil), String)
