# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `meta_request` gem.
# Please instead update this file by running `bin/tapioca gem meta_request`.

# source://meta_request//lib/meta_request.rb#3
module MetaRequest
  class << self
    # source://meta_request//lib/meta_request.rb#14
    def config; end

    # @yield [config]
    #
    # source://meta_request//lib/meta_request.rb#18
    def configure; end

    # stash a frozen copy away so we're not allocating a new string over and over
    # again in AppNotifications and LogInterceptor
    #
    # source://meta_request//lib/meta_request.rb#24
    def rails_root; end
  end
end

# source://meta_request//lib/meta_request/app_notifications.rb#4
class MetaRequest::AppNotifications
  # source://meta_request//lib/meta_request/app_notifications.rb#80
  def subscribe(event_name); end

  class << self
    # Subscribe to all events relevant to RailsPanel
    #
    # source://meta_request//lib/meta_request/app_notifications.rb#59
    def subscribe; end
  end
end

# define this here so we can pass it in to all of our cache subscribe calls
#
# source://meta_request//lib/meta_request/app_notifications.rb#10
MetaRequest::AppNotifications::CACHE_BLOCK = T.let(T.unsafe(nil), Proc)

# these are the specific keys in the cache payload that we display in the
# panel view
#
# source://meta_request//lib/meta_request/app_notifications.rb#7
MetaRequest::AppNotifications::CACHE_KEY_COLUMNS = T.let(T.unsafe(nil), Array)

# source://meta_request//lib/meta_request/app_notifications.rb#42
MetaRequest::AppNotifications::SQL_BLOCK = T.let(T.unsafe(nil), Proc)

# HACK: we hardcode the event name to 'sql.active_record' so that the ui will
# display sequel events without modification. otherwise the ui would need to
# be modified to support a sequel tab (or to change the display name on the
# active_record tab when necessary - which maybe makes more sense?)
#
# source://meta_request//lib/meta_request/app_notifications.rb#40
MetaRequest::AppNotifications::SQL_EVENT_NAME = T.let(T.unsafe(nil), String)

# source://meta_request//lib/meta_request/app_notifications.rb#50
MetaRequest::AppNotifications::VIEW_BLOCK = T.let(T.unsafe(nil), Proc)

# source://meta_request//lib/meta_request/app_request.rb#4
class MetaRequest::AppRequest
  # @return [AppRequest] a new instance of AppRequest
  #
  # source://meta_request//lib/meta_request/app_request.rb#7
  def initialize(id); end

  # source://meta_request//lib/meta_request/app_request.rb#16
  def current!; end

  # Returns the value of attribute events.
  #
  # source://meta_request//lib/meta_request/app_request.rb#5
  def events; end

  # Returns the value of attribute id.
  #
  # source://meta_request//lib/meta_request/app_request.rb#5
  def id; end

  class << self
    # source://meta_request//lib/meta_request/app_request.rb#12
    def current; end
  end
end

# source://meta_request//lib/meta_request/config.rb#4
class MetaRequest::Config
  # logger used for reporting gem's fatal errors
  #
  # source://meta_request//lib/meta_request/config.rb#8
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://meta_request//lib/meta_request/config.rb#5
  def logger=(_arg0); end

  # source://meta_request//lib/meta_request/config.rb#18
  def source_path; end

  # Sets the attribute source_path
  #
  # @param value the value to set the attribute source_path to.
  #
  # source://meta_request//lib/meta_request/config.rb#5
  def source_path=(_arg0); end

  # Number of files kept in storage.
  # Increase when using an application loading many simultaneous requests.
  #
  # source://meta_request//lib/meta_request/config.rb#14
  def storage_pool_size; end

  # Sets the attribute storage_pool_size
  #
  # @param value the value to set the attribute storage_pool_size to.
  #
  # source://meta_request//lib/meta_request/config.rb#5
  def storage_pool_size=(_arg0); end
end

# Subclass of ActiveSupport Event that is JSON encodable
#
# source://meta_request//lib/meta_request/event.rb#10
class MetaRequest::Event < ::ActiveSupport::Notifications::Event
  # @return [Event] a new instance of Event
  #
  # source://meta_request//lib/meta_request/event.rb#15
  def initialize(name, start, ending, transaction_id, payload); end

  # Returns the value of attribute duration.
  #
  # source://meta_request//lib/meta_request/event.rb#13
  def duration; end

  private

  # source://meta_request//lib/meta_request/event.rb#37
  def json_encodable(payload); end

  # @return [Boolean]
  #
  # source://meta_request//lib/meta_request/event.rb#57
  def not_encodable?(value); end

  # https://gist.github.com/dbenhur/1070399
  #
  # source://meta_request//lib/meta_request/event.rb#64
  def transform_hash(original, options = T.unsafe(nil), &block); end

  class << self
    # source://meta_request//lib/meta_request/event.rb#20
    def events_for_exception(exception_wrapper); end
  end
end

# source://meta_request//lib/meta_request/event.rb#11
MetaRequest::Event::NOT_JSON_ENCODABLE = T.let(T.unsafe(nil), String)

# source://meta_request//lib/meta_request/log_interceptor.rb#4
module MetaRequest::LogInterceptor
  # source://meta_request//lib/meta_request/log_interceptor.rb#5
  def debug(message = T.unsafe(nil), *args); end

  # source://meta_request//lib/meta_request/log_interceptor.rb#20
  def error(message = T.unsafe(nil), *args); end

  # source://meta_request//lib/meta_request/log_interceptor.rb#25
  def fatal(message = T.unsafe(nil), *args); end

  # source://meta_request//lib/meta_request/log_interceptor.rb#10
  def info(message = T.unsafe(nil), *args); end

  # source://meta_request//lib/meta_request/log_interceptor.rb#30
  def unknown(message = T.unsafe(nil), *args); end

  # source://meta_request//lib/meta_request/log_interceptor.rb#15
  def warn(message = T.unsafe(nil), *args); end

  private

  # source://meta_request//lib/meta_request/log_interceptor.rb#37
  def push_event(level, message); end
end

# source://meta_request//lib/meta_request/middlewares.rb#4
module MetaRequest::Middlewares; end

# source://meta_request//lib/meta_request/middlewares/app_request_handler.rb#7
class MetaRequest::Middlewares::AppRequestHandler
  # @return [AppRequestHandler] a new instance of AppRequestHandler
  #
  # source://meta_request//lib/meta_request/middlewares/app_request_handler.rb#8
  def initialize(app); end

  # source://meta_request//lib/meta_request/middlewares/app_request_handler.rb#12
  def call(env); end
end

# source://meta_request//lib/meta_request/middlewares/headers.rb#7
class MetaRequest::Middlewares::Headers
  # @return [Headers] a new instance of Headers
  #
  # source://meta_request//lib/meta_request/middlewares/headers.rb#8
  def initialize(app, app_config); end

  # source://meta_request//lib/meta_request/middlewares/headers.rb#13
  def call(env); end

  private

  # @return [Boolean]
  #
  # source://meta_request//lib/meta_request/middlewares/headers.rb#29
  def asset?(path); end

  # source://meta_request//lib/meta_request/middlewares/headers.rb#33
  def assets_prefix; end

  # returns true if path should be ignored (not handled by RailsPanel extension)
  #
  # @return [Boolean]
  #
  # source://meta_request//lib/meta_request/middlewares/headers.rb#25
  def skip?(path); end
end

# source://meta_request//lib/meta_request/middlewares/meta_request_handler.rb#5
class MetaRequest::Middlewares::MetaRequestHandler
  # @return [MetaRequestHandler] a new instance of MetaRequestHandler
  #
  # source://meta_request//lib/meta_request/middlewares/meta_request_handler.rb#6
  def initialize(app); end

  # source://meta_request//lib/meta_request/middlewares/meta_request_handler.rb#10
  def call(env); end

  private

  # source://meta_request//lib/meta_request/middlewares/meta_request_handler.rb#21
  def events_json(request_id); end
end

# source://meta_request//lib/meta_request/railtie.rb#6
class MetaRequest::Railtie < ::Rails::Railtie; end

# source://meta_request//lib/meta_request/storage.rb#4
class MetaRequest::Storage
  # @return [Storage] a new instance of Storage
  #
  # source://meta_request//lib/meta_request/storage.rb#7
  def initialize(key); end

  # Returns the value of attribute key.
  #
  # source://meta_request//lib/meta_request/storage.rb#5
  def key; end

  # source://meta_request//lib/meta_request/storage.rb#17
  def read; end

  # source://meta_request//lib/meta_request/storage.rb#11
  def write(value); end

  private

  # source://meta_request//lib/meta_request/storage.rb#41
  def dir_path; end

  # source://meta_request//lib/meta_request/storage.rb#31
  def file_ctime(file); end

  # source://meta_request//lib/meta_request/storage.rb#37
  def json_file; end

  # source://meta_request//lib/meta_request/storage.rb#23
  def maintain_file_pool(size); end
end

# source://meta_request//lib/meta_request/utils.rb#4
module MetaRequest::Utils
  private

  # source://meta_request//lib/meta_request/utils.rb#7
  def dev_callsite(caller); end

  # source://meta_request//lib/meta_request/utils.rb#20
  def sub_source_path(path); end

  class << self
    # source://meta_request//lib/meta_request/utils.rb#7
    def dev_callsite(caller); end

    # source://meta_request//lib/meta_request/utils.rb#20
    def sub_source_path(path); end
  end
end

# source://meta_request//lib/meta_request/version.rb#4
MetaRequest::VERSION = T.let(T.unsafe(nil), String)
