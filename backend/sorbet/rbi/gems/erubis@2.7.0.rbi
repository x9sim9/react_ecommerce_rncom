# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `erubis` gem.
# Please instead update this file by running `bin/tapioca gem erubis`.

# source://erubis//lib/erubis.rb#49
module Erubis; end

# use an Array object as buffer (included in Eruby by default)
#
# this is only for Eruby.
#
# source://erubis//lib/erubis/enhancer.rb#181
module Erubis::ArrayBufferEnhancer
  # source://erubis//lib/erubis/enhancer.rb#191
  def add_postamble(src); end

  # source://erubis//lib/erubis/enhancer.rb#187
  def add_preamble(src); end

  class << self
    # source://erubis//lib/erubis/enhancer.rb#183
    def desc; end
  end
end

# return array instead of string
#
# this is only for Eruby.
#
# source://erubis//lib/erubis/enhancer.rb#158
module Erubis::ArrayEnhancer
  # source://erubis//lib/erubis/enhancer.rb#168
  def add_postamble(src); end

  # source://erubis//lib/erubis/enhancer.rb#164
  def add_preamble(src); end

  class << self
    # source://erubis//lib/erubis/enhancer.rb#160
    def desc; end
  end
end

# source://erubis//lib/erubis/converter.rb#84
module Erubis::Basic; end

# basic converter which supports '<% ... %>' notation.
#
# source://erubis//lib/erubis/converter.rb#91
module Erubis::Basic::Converter
  include ::Erubis::Converter

  # add expression code to src
  #
  # source://erubis//lib/erubis/converter.rb#176
  def add_expr(src, code, indicator); end

  # source://erubis//lib/erubis/converter.rb#127
  def convert_input(src, input); end

  # source://erubis//lib/erubis/converter.rb#103
  def init_converter(properties = T.unsafe(nil)); end

  # Returns the value of attribute pattern.
  #
  # source://erubis//lib/erubis/converter.rb#101
  def pattern; end

  # Sets the attribute pattern
  #
  # @param value the value to set the attribute pattern to.
  #
  # source://erubis//lib/erubis/converter.rb#101
  def pattern=(_arg0); end

  # Returns the value of attribute trim.
  #
  # source://erubis//lib/erubis/converter.rb#101
  def trim; end

  # Sets the attribute trim
  #
  # @param value the value to set the attribute trim to.
  #
  # source://erubis//lib/erubis/converter.rb#101
  def trim=(_arg0); end

  private

  # return regexp of pattern to parse eRuby script
  #
  # source://erubis//lib/erubis/converter.rb#112
  def pattern_regexp(pattern); end

  class << self
    # return regexp of pattern to parse eRuby script
    #
    # source://erubis//lib/erubis/converter.rb#112
    def pattern_regexp(pattern); end

    # source://erubis//lib/erubis/converter.rb#94
    def supported_properties; end
  end
end

# DEFAULT_REGEXP = /(.*?)(^[ \t]*)?<%(=+|\#)?(.*?)-?%>([ \t]*\r?\n)?/m
# DEFAULT_REGEXP = /(^[ \t]*)?<%(=+|\#)?(.*?)-?%>([ \t]*\r?\n)?/m
# DEFAULT_REGEXP = /<%(=+|\#)?(.*?)-?%>([ \t]*\r?\n)?/m
#
# source://erubis//lib/erubis/converter.rb#123
Erubis::Basic::Converter::DEFAULT_REGEXP = T.let(T.unsafe(nil), Regexp)

# (abstract) base engine class for Eruby, Eperl, Ejava, and so on.
# subclass must include generator.
#
# source://erubis//lib/erubis/engine.rb#106
class Erubis::Basic::Engine < ::Erubis::Engine
  include ::Erubis::Evaluator
  include ::Erubis::Converter
  include ::Erubis::Basic::Converter
  include ::Erubis::Generator
end

# enable to use other embedded expression pattern (default is '\[= =\]').
#
# notice! this is an experimental. spec may change in the future.
#
# ex.
#   input = <<END
#   <% for item in list %>
#     <%= item %> : <%== item %>
#     [= item =] : [== item =]
#   <% end %>
#   END
#
#   class BiPatternEruby
#     include BiPatternEnhancer
#   end
#   eruby = BiPatternEruby.new(input, :bipattern=>'\[= =\]')
#   list = ['<a>', 'b&b', '"c"']
#   print eruby.result(binding())
#
#   ## output
#     <a> : &lt;a&gt;
#     <a> : &lt;a&gt;
#     b&b : b&amp;b
#     b&b : b&amp;b
#     "c" : &quot;c&quot;
#     "c" : &quot;c&quot;
#
# this is language independent.
#
# source://erubis//lib/erubis/enhancer.rb#402
module Erubis::BiPatternEnhancer
  # source://erubis//lib/erubis/enhancer.rb#408
  def initialize(input, properties = T.unsafe(nil)); end

  # source://erubis//lib/erubis/enhancer.rb#420
  def add_text(src, text); end

  # when pat is nil then '\[= =\]' is used
  #
  # source://erubis//lib/erubis/enhancer.rb#414
  def bipattern=(pat); end

  class << self
    # source://erubis//lib/erubis/enhancer.rb#404
    def desc; end
  end
end

# context object for Engine#evaluate
#
# ex.
#   template = <<'END'
#   Hello <%= @user %>!
#   <% for item in @list %>
#    - <%= item %>
#   <% end %>
#   END
#
#   context = Erubis::Context.new(:user=>'World', :list=>['a','b','c'])
#   # or
#   # context = Erubis::Context.new
#   # context[:user] = 'World'
#   # context[:list] = ['a', 'b', 'c']
#
#   eruby = Erubis::Eruby.new(template)
#   print eruby.evaluate(context)
#
# source://erubis//lib/erubis/context.rb#30
class Erubis::Context
  include ::Enumerable

  # @return [Context] a new instance of Context
  #
  # source://erubis//lib/erubis/context.rb#33
  def initialize(hash = T.unsafe(nil)); end

  # source://erubis//lib/erubis/context.rb#39
  def [](key); end

  # source://erubis//lib/erubis/context.rb#43
  def []=(key, value); end

  # source://erubis//lib/erubis/context.rb#51
  def each; end

  # source://erubis//lib/erubis/context.rb#47
  def keys; end

  # source://erubis//lib/erubis/context.rb#59
  def to_hash; end

  # source://erubis//lib/erubis/context.rb#65
  def update(context_or_hash); end
end

# convert
#
# source://erubis//lib/erubis/converter.rb#14
module Erubis::Converter
  # convert input string into target language
  #
  # source://erubis//lib/erubis/converter.rb#33
  def convert(input); end

  # Returns the value of attribute escape.
  #
  # source://erubis//lib/erubis/converter.rb#16
  def escape; end

  # Sets the attribute escape
  #
  # @param value the value to set the attribute escape to.
  #
  # source://erubis//lib/erubis/converter.rb#16
  def escape=(_arg0); end

  # source://erubis//lib/erubis/converter.rb#26
  def init_converter(properties = T.unsafe(nil)); end

  # Returns the value of attribute postamble.
  #
  # source://erubis//lib/erubis/converter.rb#16
  def postamble; end

  # Sets the attribute postamble
  #
  # @param value the value to set the attribute postamble to.
  #
  # source://erubis//lib/erubis/converter.rb#16
  def postamble=(_arg0); end

  # Returns the value of attribute preamble.
  #
  # source://erubis//lib/erubis/converter.rb#16
  def preamble; end

  # Sets the attribute preamble
  #
  # @param value the value to set the attribute preamble to.
  #
  # source://erubis//lib/erubis/converter.rb#16
  def preamble=(_arg0); end

  protected

  # (abstract) convert input to code
  #
  # source://erubis//lib/erubis/converter.rb#77
  def convert_input(codebuf, input); end

  # detect spaces at beginning of line
  #
  # source://erubis//lib/erubis/converter.rb#47
  def detect_spaces_at_bol(text, is_bol); end

  class << self
    # source://erubis//lib/erubis/converter.rb#18
    def supported_properties; end
  end
end

# delete indentation of HTML.
#
# this is language-independent.
#
# source://erubis//lib/erubis/enhancer.rb#616
module Erubis::DeleteIndentEnhancer
  # source://erubis//lib/erubis/enhancer.rb#622
  def convert_input(src, input); end

  class << self
    # source://erubis//lib/erubis/enhancer.rb#618
    def desc; end
  end
end

# source://erubis//lib/erubis/evaluator.rb#12
Erubis::EMPTY_BINDING = T.let(T.unsafe(nil), Binding)

# (abstract) abstract engine class.
# subclass must include evaluator and converter module.
#
# source://erubis//lib/erubis/engine.rb#20
class Erubis::Engine
  # include Evaluator
  # include Converter
  # include Generator
  #
  # @return [Engine] a new instance of Engine
  #
  # source://erubis//lib/erubis/engine.rb#25
  def initialize(input = T.unsafe(nil), properties = T.unsafe(nil)); end

  # convert input string and set it to @src
  #
  # source://erubis//lib/erubis/engine.rb#37
  def convert!(input); end

  # helper method to convert and evaluate input text with context object.
  # context may be Binding, Hash, or Object.
  #
  # source://erubis//lib/erubis/engine.rb#72
  def process(input, context = T.unsafe(nil), filename = T.unsafe(nil)); end

  # helper method evaluate Proc object with contect object.
  # context may be Binding, Hash, or Object.
  #
  # source://erubis//lib/erubis/engine.rb#88
  def process_proc(proc_obj, context = T.unsafe(nil), filename = T.unsafe(nil)); end

  class << self
    # load file, write cache file, and return engine object.
    # this method create code cache file automatically.
    # cachefile name can be specified with properties[:cachename],
    # or filname + 'cache' is used as default.
    #
    # source://erubis//lib/erubis/engine.rb#48
    def load_file(filename, properties = T.unsafe(nil)); end
  end
end

# set buffer variable name to '_erbout' as well as '_buf'
#
# this is only for Eruby.
#
# source://erubis//lib/erubis/enhancer.rb#250
module Erubis::ErboutEnhancer
  # source://erubis//lib/erubis/enhancer.rb#260
  def add_postamble(src); end

  # source://erubis//lib/erubis/enhancer.rb#256
  def add_preamble(src); end

  class << self
    # source://erubis//lib/erubis/enhancer.rb#252
    def desc; end
  end
end

# base error class
#
# source://erubis//lib/erubis/error.rb#12
class Erubis::ErubisError < ::StandardError; end

# engine for Ruby
#
# source://erubis//lib/erubis/engine/eruby.rb#81
class Erubis::Eruby < ::Erubis::Basic::Engine
  include ::Erubis::RubyEvaluator
  include ::Erubis::StringBufferEnhancer
  include ::Erubis::RubyGenerator
end

# switch '<%= ... %>' to escaped and '<%== ... %>' to unescaped
#
# ex.
#   class XmlEruby < Eruby
#     include EscapeEnhancer
#   end
#
# this is language-indenedent.
#
# source://erubis//lib/erubis/enhancer.rb#20
module Erubis::EscapeEnhancer
  # --
  # def self.included(klass)
  #  klass.class_eval <<-END
  #    alias _add_expr_literal add_expr_literal
  #    alias _add_expr_escaped add_expr_escaped
  #    alias add_expr_literal _add_expr_escaped
  #    alias add_expr_escaped _add_expr_literal
  #  END
  # end
  # ++
  #
  # source://erubis//lib/erubis/enhancer.rb#37
  def add_expr(src, code, indicator); end

  class << self
    # source://erubis//lib/erubis/enhancer.rb#22
    def desc; end
  end
end

# swtich '<%= %>' to escaped and '<%== %>' to not escaped
#
# source://erubis//lib/erubis/engine/eruby.rb#98
class Erubis::EscapedEruby < ::Erubis::Eruby
  include ::Erubis::EscapeEnhancer
end

# evaluate code
#
# source://erubis//lib/erubis/evaluator.rb#18
module Erubis::Evaluator
  # @raise [NotSupportedError]
  #
  # source://erubis//lib/erubis/evaluator.rb#34
  def evaluate(*args); end

  # Returns the value of attribute filename.
  #
  # source://erubis//lib/erubis/evaluator.rb#24
  def filename; end

  # Sets the attribute filename
  #
  # @param value the value to set the attribute filename to.
  #
  # source://erubis//lib/erubis/evaluator.rb#24
  def filename=(_arg0); end

  # source://erubis//lib/erubis/evaluator.rb#26
  def init_evaluator(properties); end

  # @raise [NotSupportedError]
  #
  # source://erubis//lib/erubis/evaluator.rb#30
  def result(*args); end

  # Returns the value of attribute src.
  #
  # source://erubis//lib/erubis/evaluator.rb#24
  def src; end

  # Sets the attribute src
  #
  # @param value the value to set the attribute src to.
  #
  # source://erubis//lib/erubis/evaluator.rb#24
  def src=(_arg0); end

  class << self
    # source://erubis//lib/erubis/evaluator.rb#20
    def supported_properties; end
  end
end

# fast engine for Ruby
#
# source://erubis//lib/erubis/engine/eruby.rb#90
class Erubis::FastEruby < ::Erubis::Eruby
  include ::Erubis::InterpolationEnhancer
end

# code generator, called by Converter module
#
# source://erubis//lib/erubis/generator.rb#14
module Erubis::Generator
  # (abstract) add expression code to src for debug. this is called by add_expr().
  #
  # source://erubis//lib/erubis/generator.rb#72
  def add_expr_debug(src, code); end

  # (abstract) add escaped expression code to src. this is called by add_expr().
  #
  # source://erubis//lib/erubis/generator.rb#67
  def add_expr_escaped(src, code); end

  # (abstract) add expression literal code to src. this is called by add_expr().
  #
  # source://erubis//lib/erubis/generator.rb#62
  def add_expr_literal(src, code); end

  # (abstract) add @postamble to src
  #
  # source://erubis//lib/erubis/generator.rb#77
  def add_postamble(src); end

  # (abstract) add @preamble to src
  #
  # source://erubis//lib/erubis/generator.rb#47
  def add_preamble(src); end

  # (abstract) add statement code to src
  #
  # source://erubis//lib/erubis/generator.rb#57
  def add_stmt(src, code); end

  # (abstract) add text string to src
  #
  # source://erubis//lib/erubis/generator.rb#52
  def add_text(src, text); end

  # (abstract) escape text string
  #
  # ex.
  #   def escape_text(text)
  #     return text.dump
  #     # or return "'" + text.gsub(/['\\]/, '\\\\\&') + "'"
  #   end
  #
  # source://erubis//lib/erubis/generator.rb#36
  def escape_text(text); end

  # return escaped expression code (ex. 'h(...)' or 'htmlspecialchars(...)')
  #
  # source://erubis//lib/erubis/generator.rb#41
  def escaped_expr(code); end

  # Returns the value of attribute escapefunc.
  #
  # source://erubis//lib/erubis/generator.rb#22
  def escapefunc; end

  # Sets the attribute escapefunc
  #
  # @param value the value to set the attribute escapefunc to.
  #
  # source://erubis//lib/erubis/generator.rb#22
  def escapefunc=(_arg0); end

  # source://erubis//lib/erubis/generator.rb#24
  def init_generator(properties = T.unsafe(nil)); end

  class << self
    # source://erubis//lib/erubis/generator.rb#16
    def supported_properties; end
  end
end

# [experimental] allow header and footer in eRuby script
#
# ex.
#   ====================
#   ## without header and footer
#   $ cat ex1.eruby
#   <% def list_items(list) %>
#   <%   for item in list %>
#   <li><%= item %></li>
#   <%   end %>
#   <% end %>
#
#   $ erubis -s ex1.eruby
#   _buf = []; def list_items(list)
#   ;   for item in list
#   ; _buf << '<li>'; _buf << ( item ).to_s; _buf << '</li>
#   ';   end
#   ; end
#   ;
#   _buf.join
#
#   ## with header and footer
#   $ cat ex2.eruby
#   <!--#header:
#   def list_items(list)
#    #-->
#   <%  for item in list %>
#   <li><%= item %></li>
#   <%  end %>
#   <!--#footer:
#   end
#    #-->
#
#   $ erubis -s -c HeaderFooterEruby ex4.eruby
#
#   def list_items(list)
#    _buf = []; _buf << '
#   ';  for item in list
#   ; _buf << '<li>'; _buf << ( item ).to_s; _buf << '</li>
#   ';  end
#   ; _buf << '
#   ';
#   _buf.join
#   end
#
#   ====================
#
# this is language-independent.
#
# source://erubis//lib/erubis/enhancer.rb#577
module Erubis::HeaderFooterEnhancer
  # source://erubis//lib/erubis/enhancer.rb#585
  def add_text(src, text); end

  # source://erubis//lib/erubis/enhancer.rb#603
  def convert(input); end

  # Returns the value of attribute footer.
  #
  # source://erubis//lib/erubis/enhancer.rb#601
  def footer; end

  # Sets the attribute footer
  #
  # @param value the value to set the attribute footer to.
  #
  # source://erubis//lib/erubis/enhancer.rb#601
  def footer=(_arg0); end

  # Returns the value of attribute header.
  #
  # source://erubis//lib/erubis/enhancer.rb#601
  def header; end

  # Sets the attribute header
  #
  # @param value the value to set the attribute header to.
  #
  # source://erubis//lib/erubis/enhancer.rb#601
  def header=(_arg0); end

  class << self
    # source://erubis//lib/erubis/enhancer.rb#579
    def desc; end
  end
end

# source://erubis//lib/erubis/enhancer.rb#583
Erubis::HeaderFooterEnhancer::HEADER_FOOTER_PATTERN = T.let(T.unsafe(nil), Regexp)

# convert "<h1><%=title%></h1>" into "_buf << %Q`<h1>#{title}</h1>`"
#
# this is only for Eruby.
#
# source://erubis//lib/erubis/enhancer.rb#635
module Erubis::InterpolationEnhancer
  # source://erubis//lib/erubis/enhancer.rb#707
  def _add_text_to_str(str, text); end

  # source://erubis//lib/erubis/enhancer.rb#712
  def add_expr_escaped(str, code); end

  # source://erubis//lib/erubis/enhancer.rb#716
  def add_expr_literal(str, code); end

  # source://erubis//lib/erubis/enhancer.rb#696
  def add_text(src, text); end

  # source://erubis//lib/erubis/enhancer.rb#641
  def convert_input(src, input); end

  class << self
    # source://erubis//lib/erubis/enhancer.rb#637
    def desc; end
  end
end

# remove code and leave text, especially useful when validating HTML tags.
#
# ex.
#   $ erubis -s -E NoCode file.eruby | tidy -errors
#
# this is language independent.
#
# source://erubis//lib/erubis/enhancer.rb#301
module Erubis::NoCodeEnhancer
  # source://erubis//lib/erubis/enhancer.rb#317
  def add_expr(src, code, indicator); end

  # source://erubis//lib/erubis/enhancer.rb#310
  def add_postamble(src); end

  # source://erubis//lib/erubis/enhancer.rb#307
  def add_preamble(src); end

  # source://erubis//lib/erubis/enhancer.rb#321
  def add_stmt(src, code); end

  # source://erubis//lib/erubis/enhancer.rb#313
  def add_text(src, text); end

  class << self
    # source://erubis//lib/erubis/enhancer.rb#303
    def desc; end
  end
end

# remove text and leave code, especially useful when debugging.
#
# ex.
#   $ erubis -s -E NoText file.eruby | more
#
# this is language independent.
#
# source://erubis//lib/erubis/enhancer.rb#276
module Erubis::NoTextEnhancer
  # source://erubis//lib/erubis/enhancer.rb#282
  def add_text(src, text); end

  class << self
    # source://erubis//lib/erubis/enhancer.rb#278
    def desc; end
  end
end

# raised when method or function is not supported
#
# source://erubis//lib/erubis/error.rb#19
class Erubis::NotSupportedError < ::Erubis::ErubisError; end

# source://erubis//lib/erubis/converter.rb#190
module Erubis::PI; end

# Processing Instructions (PI) converter for XML.
# this class converts '<?rb ... ?>' and '${...}' notation.
#
# source://erubis//lib/erubis/converter.rb#197
module Erubis::PI::Converter
  include ::Erubis::Converter

  # source://erubis//lib/erubis/converter.rb#224
  def convert(input); end

  # source://erubis//lib/erubis/converter.rb#215
  def init_converter(properties = T.unsafe(nil)); end

  # Returns the value of attribute pi.
  #
  # source://erubis//lib/erubis/converter.rb#213
  def pi; end

  # Sets the attribute pi
  #
  # @param value the value to set the attribute pi to.
  #
  # source://erubis//lib/erubis/converter.rb#213
  def pi=(_arg0); end

  # Returns the value of attribute prefix.
  #
  # source://erubis//lib/erubis/converter.rb#213
  def prefix; end

  # Sets the attribute prefix
  #
  # @param value the value to set the attribute prefix to.
  #
  # source://erubis//lib/erubis/converter.rb#213
  def prefix=(_arg0); end

  protected

  # source://erubis//lib/erubis/converter.rb#341
  def add_pi_expr(codebuf, code, indicator); end

  # --
  # def convert_input(codebuf, input)
  #  parse_stmts(codebuf, input)
  #  #parse_stmts2(codebuf, input)
  # end
  #
  # def parse_stmts(codebuf, input)
  #  #regexp = pattern_regexp(@pattern)
  #  @pi ||= 'e'
  #  @stmt_pattern ||= /<\?#{@pi}(?:-(\w+))?(\s.*?)\?>([ \t]*\r?\n)?/m
  #  is_bol = true
  #  pos = 0
  #  input.scan(@stmt_pattern) do |pi_arg, code, rspace|
  #    match = Regexp.last_match
  #    len  = match.begin(0) - pos
  #    text = input[pos, len]
  #    pos  = match.end(0)
  #    lspace = detect_spaces_at_bol(text, is_bol)
  #    is_bol = rspace ? true : false
  #    parse_exprs(codebuf, text) # unless text.empty?
  #    if @trim && lspace && rspace
  #      add_pi_stmt(codebuf, "#{lspace}#{code}#{rspace}", pi_arg)
  #    else
  #      add_text(codebuf, lspace)
  #      add_pi_stmt(codebuf, code, pi_arg)
  #      add_text(codebuf, rspace)
  #    end
  #  end
  #  rest = $' || input
  #  parse_exprs(codebuf, rest)
  # end
  #
  # def parse_exprs(codebuf, input)
  #  unless @expr_pattern
  #    ch = Regexp.escape(@embchar)
  #    if @pattern
  #      left, right = @pattern.split(' ')
  #      @expr_pattern = /#{ch}(!*)?\{(.*?)\}#{ch}|#{left}(=+)(.*?)#{right}/
  #    else
  #      @expr_pattern = /#{ch}(!*)?\{(.*?)\}#{ch}/
  #    end
  #  end
  #  pos = 0
  #  input.scan(@expr_pattern) do |indicator1, code1, indicator2, code2|
  #    indicator = indicator1 || indicator2
  #    code = code1 || code2
  #    match = Regexp.last_match
  #    len  = match.begin(0) - pos
  #    text = input[pos, len]
  #    pos  = match.end(0)
  #    add_text(codebuf, text) # unless text.empty?
  #    add_pi_expr(codebuf, code, indicator)
  #  end
  #  rest = $' || input
  #  add_text(codebuf, rest)
  # end
  # ++
  #
  # source://erubis//lib/erubis/converter.rb#330
  def add_pi_stmt(codebuf, code, pi_arg); end

  # source://erubis//lib/erubis/converter.rb#231
  def convert_input(codebuf, input); end

  class << self
    # source://erubis//lib/erubis/converter.rb#200
    def desc; end

    # source://erubis//lib/erubis/converter.rb#204
    def supported_properties; end
  end
end

# source://erubis//lib/erubis/engine.rb#113
class Erubis::PI::Engine < ::Erubis::Engine
  include ::Erubis::Evaluator
  include ::Erubis::Converter
  include ::Erubis::PI::Converter
  include ::Erubis::Generator
end

# source://erubis//lib/erubis/engine/eruby.rb#113
class Erubis::PI::Eruby < ::Erubis::PI::Engine
  include ::Erubis::RubyEvaluator
  include ::Erubis::StringBufferEnhancer
  include ::Erubis::RubyGenerator

  # source://erubis//lib/erubis/engine/eruby.rb#117
  def init_converter(properties = T.unsafe(nil)); end
end

# regards lines starting with '%' as program code
#
# this is for compatibility to eruby and ERB.
#
# this is language-independent.
#
# source://erubis//lib/erubis/enhancer.rb#501
module Erubis::PercentLineEnhancer
  include ::Erubis::PrefixedLineEnhancer

  # --
  # def init_generator(properties={})
  #  super
  #  @prefixchar = '%'
  #  @prefixrexp = /^\%(.*?\r?\n)/
  # end
  # ++
  #
  # source://erubis//lib/erubis/enhancer.rb#516
  def add_text(src, text); end

  class << self
    # source://erubis//lib/erubis/enhancer.rb#504
    def desc; end
  end
end

# regards lines starting with '^[ \t]*%' as program code
#
# in addition you can specify prefix character (default '%')
#
# this is language-independent.
#
# source://erubis//lib/erubis/enhancer.rb#443
module Erubis::PrefixedLineEnhancer
  # source://erubis//lib/erubis/enhancer.rb#454
  def add_text(src, text); end

  # source://erubis//lib/erubis/enhancer.rb#449
  def init_generator(properties = T.unsafe(nil)); end

  class << self
    # source://erubis//lib/erubis/enhancer.rb#445
    def desc; end
  end
end

# enable print function
#
# Notice: use Eruby#evaluate() and don't use Eruby#result()
# to be enable print function.
#
# this is only for Eruby.
#
# source://erubis//lib/erubis/enhancer.rb#121
module Erubis::PrintEnabledEnhancer
  # source://erubis//lib/erubis/enhancer.rb#127
  def add_preamble(src); end

  # source://erubis//lib/erubis/enhancer.rb#138
  def evaluate(context = T.unsafe(nil)); end

  # source://erubis//lib/erubis/enhancer.rb#132
  def print(*args); end

  class << self
    # source://erubis//lib/erubis/enhancer.rb#123
    def desc; end
  end
end

# use print statement instead of '_buf << ...'
#
# this is only for Eruby.
#
# source://erubis//lib/erubis/enhancer.rb#85
module Erubis::PrintOutEnhancer
  # source://erubis//lib/erubis/enhancer.rb#102
  def add_expr_escaped(src, code); end

  # source://erubis//lib/erubis/enhancer.rb#98
  def add_expr_literal(src, code); end

  # source://erubis//lib/erubis/enhancer.rb#106
  def add_postamble(src); end

  # source://erubis//lib/erubis/enhancer.rb#91
  def add_preamble(src); end

  # source://erubis//lib/erubis/enhancer.rb#94
  def add_text(src, text); end

  class << self
    # source://erubis//lib/erubis/enhancer.rb#87
    def desc; end
  end
end

# evaluator for Ruby
#
# source://erubis//lib/erubis/evaluator.rb#44
module Erubis::RubyEvaluator
  include ::Erubis::Evaluator

  # if object is an Class or Module then define instance method to it,
  # else define singleton method to it.
  #
  # source://erubis//lib/erubis/evaluator.rb#79
  def def_method(object, method_name, filename = T.unsafe(nil)); end

  # invoke context.instance_eval(@src)
  #
  # source://erubis//lib/erubis/evaluator.rb#69
  def evaluate(_context = T.unsafe(nil)); end

  # eval(@src) with binding object
  #
  # source://erubis//lib/erubis/evaluator.rb#53
  def result(_binding_or_hash = T.unsafe(nil)); end

  class << self
    # source://erubis//lib/erubis/evaluator.rb#47
    def supported_properties; end
  end
end

# code generator for Ruby
#
# source://erubis//lib/erubis/engine/eruby.rb#16
module Erubis::RubyGenerator
  include ::Erubis::Generator
  include ::Erubis::StringBufferEnhancer

  # source://erubis//lib/erubis/engine/eruby.rb#63
  def add_expr_debug(src, code); end

  # source://erubis//lib/erubis/engine/eruby.rb#59
  def add_expr_escaped(src, code); end

  # source://erubis//lib/erubis/engine/eruby.rb#55
  def add_expr_literal(src, code); end

  # source://erubis//lib/erubis/engine/eruby.rb#49
  def add_stmt(src, code); end

  # --
  # def add_preamble(src)
  #  src << "#{@bufvar} = [];"
  # end
  # ++
  #
  # source://erubis//lib/erubis/engine/eruby.rb#45
  def add_text(src, text); end

  # source://erubis//lib/erubis/engine/eruby.rb#31
  def escape_text(text); end

  # source://erubis//lib/erubis/engine/eruby.rb#35
  def escaped_expr(code); end

  # source://erubis//lib/erubis/engine/eruby.rb#21
  def init_generator(properties = T.unsafe(nil)); end

  class << self
    # source://erubis//lib/erubis/engine/eruby.rb#27
    def supported_properties; end
  end
end

# get convert faster, but spaces around '<%...%>' are not trimmed.
#
# this is language-independent.
#
# source://erubis//lib/erubis/enhancer.rb#333
module Erubis::SimplifyEnhancer
  # source://erubis//lib/erubis/enhancer.rb#342
  def convert(input); end

  class << self
    # source://erubis//lib/erubis/enhancer.rb#335
    def desc; end
  end
end

# DEFAULT_REGEXP = /(^[ \t]*)?<%(=+|\#)?(.*?)-?%>([ \t]*\r?\n)?/m
#
# source://erubis//lib/erubis/enhancer.rb#340
Erubis::SimplifyEnhancer::SIMPLE_REGEXP = T.let(T.unsafe(nil), Regexp)

# use $stdout instead of string
#
# this is only for Eruby.
#
# source://erubis//lib/erubis/enhancer.rb#63
module Erubis::StdoutEnhancer
  # source://erubis//lib/erubis/enhancer.rb#73
  def add_postamble(src); end

  # source://erubis//lib/erubis/enhancer.rb#69
  def add_preamble(src); end

  class << self
    # source://erubis//lib/erubis/enhancer.rb#65
    def desc; end
  end
end

# use String class for buffering
#
# this is only for Eruby.
#
# source://erubis//lib/erubis/enhancer.rb#204
module Erubis::StringBufferEnhancer
  # source://erubis//lib/erubis/enhancer.rb#214
  def add_postamble(src); end

  # source://erubis//lib/erubis/enhancer.rb#210
  def add_preamble(src); end

  class << self
    # source://erubis//lib/erubis/enhancer.rb#206
    def desc; end
  end
end

# use StringIO class for buffering
#
# this is only for Eruby.
#
# source://erubis//lib/erubis/enhancer.rb#227
module Erubis::StringIOEnhancer
  # source://erubis//lib/erubis/enhancer.rb#237
  def add_postamble(src); end

  # source://erubis//lib/erubis/enhancer.rb#233
  def add_preamble(src); end

  class << self
    # source://erubis//lib/erubis/enhancer.rb#229
    def desc; end
  end
end

# source://erubis//lib/erubis.rb#50
Erubis::VERSION = T.let(T.unsafe(nil), String)

# sanitize expression (<%= ... %>) by default
#
# this is equivalent to EscapedEruby and is prepared only for compatibility.
#
# source://erubis//lib/erubis/engine/eruby.rb#108
class Erubis::XmlEruby < ::Erubis::Eruby
  include ::Erubis::EscapeEnhancer
end

# helper for xml
#
# source://erubis//lib/erubis/helper.rb#12
module Erubis::XmlHelper
  private

  # source://erubis//lib/erubis/helper.rb#24
  def escape_xml(value); end

  # source://erubis//lib/erubis/helper.rb#29
  def escape_xml2(value); end

  # source://erubis//lib/erubis/helper.rb#24
  def h(value); end

  # source://erubis//lib/erubis/helper.rb#24
  def html_escape(value); end

  # source://erubis//lib/erubis/helper.rb#36
  def u(str); end

  # source://erubis//lib/erubis/helper.rb#36
  def url_encode(str); end

  class << self
    # source://erubis//lib/erubis/helper.rb#24
    def escape_xml(value); end

    # source://erubis//lib/erubis/helper.rb#29
    def escape_xml2(value); end

    # source://erubis//lib/erubis/helper.rb#36
    def url_encode(str); end
  end
end

# source://erubis//lib/erubis/helper.rb#16
Erubis::XmlHelper::ESCAPE_TABLE = T.let(T.unsafe(nil), Hash)

# source://erubis//lib/erubis/util.rb#6
module Kernel
  private

  # raise NotImplementedError
  #
  # source://erubis//lib/erubis/util.rb#11
  def not_implemented; end
end
