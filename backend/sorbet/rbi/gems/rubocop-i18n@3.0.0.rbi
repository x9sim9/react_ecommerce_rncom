# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rubocop-i18n` gem.
# Please instead update this file by running `bin/tapioca gem rubocop-i18n`.

# source://rubocop-i18n//lib/rubocop/cop/i18n/gettext.rb#3
module RuboCop; end

# source://rubocop-i18n//lib/rubocop/cop/i18n/gettext.rb#4
module RuboCop::Cop; end

# source://rubocop-i18n//lib/rubocop/cop/i18n/gettext.rb#5
module RuboCop::Cop::I18n; end

# source://rubocop-i18n//lib/rubocop/cop/i18n/gettext.rb#6
module RuboCop::Cop::I18n::GetText
  class << self
    # @return [Boolean]
    #
    # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext.rb#39
    def supported_decorator?(decorator_name); end

    # Supports decorators from
    # * mutoh/gettext https://github.com/mutoh/gettext/blob/master/lib/gettext.rb
    # * grosser/fast_gettext https://github.com/grosser/fast_gettext/blob/master/lib/fast_gettext/translation.rb
    #
    # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext.rb#14
    def supported_decorators; end

    # @return [Boolean]
    #
    # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext.rb#35
    def supported_method?(method_name); end

    # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext.rb#7
    def supported_methods; end
  end
end

# source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_function_message.rb#7
class RuboCop::Cop::I18n::GetText::DecorateFunctionMessage < ::RuboCop::Cop::Cop
  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_function_message.rb#25
  def autocorrect(node); end

  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_function_message.rb#8
  def on_send(node); end

  private

  # @return [Boolean]
  #
  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_function_message.rb#35
  def already_decorated?(node, parent = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_function_message.rb#87
  def concatenation_offense?(node, parent = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_function_message.rb#51
  def contains_string?(nodes); end

  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_function_message.rb#55
  def detect_and_report(_node, message_section, method_name); end

  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_function_message.rb#71
  def how_bad_is_it(message_section); end

  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_function_message.rb#116
  def interpolation_correct(node); end

  # @return [Boolean]
  #
  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_function_message.rb#99
  def interpolation_offense?(node, parent = T.unsafe(nil)); end

  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_function_message.rb#109
  def single_string_correct(node); end

  # @return [Boolean]
  #
  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_function_message.rb#47
  def string_constant?(nodes); end
end

# This cop is looks for strings that appear to be sentences but are not decorated.
# Sentences are determined by the STRING_REGEXP. (Upper case character, at least one space,
# and sentence punctuation at the end)
#
# @example
#
#   # bad
#
#   "Result is bad."
# @example
#
#   # good
#
#   _("Result is good.")
#
# source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_string.rb#22
class RuboCop::Cop::I18n::GetText::DecorateString < ::RuboCop::Cop::Cop
  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_string.rb#40
  def autocorrect(node); end

  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_string.rb#25
  def on_dstr(node); end

  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_string.rb#29
  def on_str(node); end

  private

  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_string.rb#65
  def check_for_parent_decorator(node); end

  # @return [Boolean]
  #
  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_string.rb#61
  def dstr_contains_sentence?(node); end

  # @return [Boolean]
  #
  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_string.rb#46
  def sentence?(node); end

  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_string.rb#76
  def single_string_correct(node); end
end

# source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_string.rb#23
RuboCop::Cop::I18n::GetText::DecorateString::STRING_REGEXP = T.let(T.unsafe(nil), Regexp)

# When using an decorated string to support I18N, any strings inside the decoration should not contain
# the '#{}' interpolation string as this makes it hard to translate the strings.
#
# Check GetText.supported_decorators for a list of decorators that can be used.
#
# @example
#
#   # bad
#
#   _("result is #{this_is_the_result}")
#   n_("a string" + "a string with a #{float_value}")
# @example
#
#   # good
#
#   _("result is %{detail}" % {detail: message})
#
# source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_string_formatting_using_interpolation.rb#25
class RuboCop::Cop::I18n::GetText::DecorateStringFormattingUsingInterpolation < ::RuboCop::Cop::Cop
  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_string_formatting_using_interpolation.rb#26
  def on_send(node); end

  private

  # @return [Boolean]
  #
  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_string_formatting_using_interpolation.rb#44
  def contains_string_formatting_with_interpolation?(node); end

  # @return [Boolean]
  #
  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_string_formatting_using_interpolation.rb#40
  def string_contains_interpolation_format?(str); end
end

# When using a decorated string to support I18N, any strings inside the decoration should not contain sprintf
# style formatting as this makes it hard to translate the string. This cop checks the decorators listed in
# GetText.supported_decorators and checks for each of the formats in SUPPORTED_FORMATS. NOTE: this cop does not
# check for all possible sprintf formats.
#
# @example
#
#   # bad
#
#   _("result is %s" % ["value"])
#   n_("a string" + "a string with a %-3.1f" % [size])
#   N_("a string" + "a string with a %04d" % [size])
# @example
#
#   # good
#
#   _("result is %{detail}" % {detail: message})
#
# source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_string_formatting_using_percent.rb#26
class RuboCop::Cop::I18n::GetText::DecorateStringFormattingUsingPercent < ::RuboCop::Cop::Cop
  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_string_formatting_using_percent.rb#29
  def on_send(node); end

  private

  # @return [Boolean]
  #
  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_string_formatting_using_percent.rb#47
  def contains_string_with_percent_format?(node); end

  # @return [Boolean]
  #
  # source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_string_formatting_using_percent.rb#43
  def string_contains_percent_format?(str); end
end

# source://rubocop-i18n//lib/rubocop/cop/i18n/gettext/decorate_string_formatting_using_percent.rb#27
RuboCop::Cop::I18n::GetText::DecorateStringFormattingUsingPercent::SUPPORTED_FORMATS = T.let(T.unsafe(nil), Array)

# The Rails I18n module contains cops used to lint and enforce the use of strings
# in rails applications that want to use the I18n gem.
#
# source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n.rb#8
module RuboCop::Cop::I18n::RailsI18n
  class << self
    # @return [Boolean]
    #
    # source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n.rb#18
    def supported_decorator?(decorator_name); end

    # source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n.rb#9
    def supported_decorators; end
  end
end

# This cop is looks for strings that appear to be sentences but are not decorated.
# Sentences are determined by the SENTENCE_REGEXP. (Upper case character, at least one space,
# and sentence punctuation at the end)
#
# There are several options for configuration.
#
# @example
#
#   # bad
#
#   "Result is bad."
# @example
#
#   # good
#
#   t("result_is_good")
#   I18n.t("result_is_good")
# @example IgnoreExceptions: true
#   # OK
#
#   raise "Some string sentence"
# @example EnforcedSentenceType: sentence
#   # bad
#
#   "Result is bad."
#
#   # good
#
#   t("result_is_good")
#   I18n.t("result_is_good")
# @example EnforcedSentenceType: fragmented_sentence
#   # bad
#
#   "Result is bad"   # Contains a capital to start
#   "result is bad."  # Ends in punctuation
#
#   # good
#
#   t("result_is_good")
#   I18n.t("result_is_good")
# @example EnforcedSentenceType: fragment
#   # bad
#
#   "result is bad"   # A series of words
#
#   # good
#
#   t("result_is_good")
#   I18n.t("result_is_good")
# @example Regexp: ^only-this-text$
#
#   # bad
#
#   "only-this-text"
#
#   # good
#
#   "Any other string is fine now"
#   t("only_this_text")
#
# source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string.rb#73
class RuboCop::Cop::I18n::RailsI18n::DecorateString < ::RuboCop::Cop::Cop
  # source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string.rb#84
  def on_dstr(node); end

  # source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string.rb#88
  def on_str(node); end

  private

  # source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string.rb#138
  def check_for_parent_decorator(node); end

  # @return [Boolean]
  #
  # source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string.rb#134
  def dstr_contains_sentence?(node); end

  # @return [Boolean]
  #
  # source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string.rb#146
  def ignoring_raised_parent?(parent); end

  # @return [Boolean]
  #
  # source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string.rb#157
  def parent_is_indexer?(parent); end

  # @return [Boolean]
  #
  # source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string.rb#161
  def parent_is_translator?(parent); end

  # source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string.rb#116
  def regexp; end

  # source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string.rb#130
  def regexp_from_config; end

  # source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string.rb#120
  def regexp_from_string_type; end

  # @return [Boolean]
  #
  # source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string.rb#101
  def sentence?(node); end
end

# source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string.rb#75
RuboCop::Cop::I18n::RailsI18n::DecorateString::FRAGMENTED_SENTENCE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string.rb#76
RuboCop::Cop::I18n::RailsI18n::DecorateString::FRAGMENT_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string.rb#74
RuboCop::Cop::I18n::RailsI18n::DecorateString::SENTENCE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string.rb#77
RuboCop::Cop::I18n::RailsI18n::DecorateString::SUPPORTED_DECORATORS = T.let(T.unsafe(nil), Array)

# When using an decorated string to support I18N, any strings inside the decoration should not contain
# the '#{}' interpolation string as this makes it hard to translate the strings.
#
# @example
#
#   # bad
#
#   t("status.#{status_string}")
#   t("status." + "accepted")
# @example
#
#   # good
#
#   t("status.accepted")
#
# source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string_formatting_using_interpolation.rb#23
class RuboCop::Cop::I18n::RailsI18n::DecorateStringFormattingUsingInterpolation < ::RuboCop::Cop::Cop
  # source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string_formatting_using_interpolation.rb#24
  def on_send(node); end

  private

  # @return [Boolean]
  #
  # source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string_formatting_using_interpolation.rb#48
  def contains_string_formatting_with_interpolation?(node); end

  # source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string_formatting_using_interpolation.rb#40
  def error_message(method_name); end

  # @return [Boolean]
  #
  # source://rubocop-i18n//lib/rubocop/cop/i18n/rails_i18n/decorate_string_formatting_using_interpolation.rb#44
  def string_contains_interpolation_format?(str); end
end
