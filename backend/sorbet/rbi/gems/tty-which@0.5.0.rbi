# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tty-which` gem.
# Please instead update this file by running `bin/tapioca gem tty-which`.

# source://tty-which//lib/tty/which/version.rb#3
module TTY; end

# A class responsible for finding an executable in the PATH
#
# source://tty-which//lib/tty/which/version.rb#4
module TTY::Which
  private

  # Determines if filename is an executable file
  #
  # @api private
  # @example Basic usage
  #   executable_file?("/usr/bin/less") # => true
  # @example Executable in directory
  #   executable_file?("less", "/usr/bin") # => true
  #   executable_file?("less", "/usr") # => false
  # @param filename [String] the path to file
  # @param dir [String] the directory within which to search for filename
  # @return [Boolean]
  #
  # source://tty-which//lib/tty/which.rb#128
  def executable_file?(filename, dir = T.unsafe(nil)); end

  # Check if executable exists in the path
  #
  # @api public
  # @param cmd [String] the executable to check
  # @param paths [Array<String>] paths to check
  # @return [Boolean]
  #
  # source://tty-which//lib/tty/which.rb#63
  def exist?(cmd, paths: T.unsafe(nil)); end

  # All possible file extensions
  #
  # @api private
  # @example
  #   extensions(".exe;cmd;.bat")
  #   # => [".exe", ".bat"]
  # @param path_ext [String] a string of semicolon separated filename extensions
  # @return [Array<String>] an array with valid file extensions
  #
  # source://tty-which//lib/tty/which.rb#104
  def extensions(path_ext = T.unsafe(nil)); end

  # Check if command itself has executable extension
  #
  # @api private
  # @example
  #   file_with_exec_ext?("file.bat")
  #   # => true
  # @param filename [String] the path to executable file
  # @return [Boolean]
  #
  # source://tty-which//lib/tty/which.rb#147
  def file_with_exec_ext?(filename); end

  # Check if executable file is part of absolute/relative path
  #
  # @api private
  # @param cmd [String] the executable to check
  # @return [Boolean]
  #
  # source://tty-which//lib/tty/which.rb#163
  def file_with_path?(cmd); end

  # Find default system paths
  #
  # @api private
  # @example
  #   search_paths("/usr/local/bin:/bin")
  #   # => ["/bin"]
  # @param path [String] the path to search through
  # @return [Array<String>] the array of paths to search
  #
  # source://tty-which//lib/tty/which.rb#81
  def search_paths(path = T.unsafe(nil)); end

  # Find an executable in a platform independent way
  #
  # @api public
  # @example
  #   which("ruby")                 # => "/usr/local/bin/ruby"
  #   which("/usr/local/bin/ruby")  # => "/usr/local/bin/ruby"
  #   which("foo")                  # => nil
  # @example
  #   which("ruby", paths: ["/usr/locale/bin", "/usr/bin", "/bin"])
  # @param cmd [String] the command to search for
  # @param paths [Array<String>] the paths to look through
  # @return [String, nil] the absolute path to executable if found, `nil` otherwise
  #
  # source://tty-which//lib/tty/which.rb#27
  def which(cmd, paths: T.unsafe(nil)); end

  class << self
    # Determines if filename is an executable file
    #
    # @api private
    # @example Basic usage
    #   executable_file?("/usr/bin/less") # => true
    # @example Executable in directory
    #   executable_file?("less", "/usr/bin") # => true
    #   executable_file?("less", "/usr") # => false
    # @param filename [String] the path to file
    # @param dir [String] the directory within which to search for filename
    # @return [Boolean]
    #
    # source://tty-which//lib/tty/which.rb#128
    def executable_file?(filename, dir = T.unsafe(nil)); end

    # Check if executable exists in the path
    #
    # @api public
    # @param cmd [String] the executable to check
    # @param paths [Array<String>] paths to check
    # @return [Boolean]
    #
    # source://tty-which//lib/tty/which.rb#63
    def exist?(cmd, paths: T.unsafe(nil)); end

    # All possible file extensions
    #
    # @api private
    # @example
    #   extensions(".exe;cmd;.bat")
    #   # => [".exe", ".bat"]
    # @param path_ext [String] a string of semicolon separated filename extensions
    # @return [Array<String>] an array with valid file extensions
    #
    # source://tty-which//lib/tty/which.rb#104
    def extensions(path_ext = T.unsafe(nil)); end

    # Check if command itself has executable extension
    #
    # @api private
    # @example
    #   file_with_exec_ext?("file.bat")
    #   # => true
    # @param filename [String] the path to executable file
    # @return [Boolean]
    #
    # source://tty-which//lib/tty/which.rb#147
    def file_with_exec_ext?(filename); end

    # Check if executable file is part of absolute/relative path
    #
    # @api private
    # @param cmd [String] the executable to check
    # @return [Boolean]
    #
    # source://tty-which//lib/tty/which.rb#163
    def file_with_path?(cmd); end

    # Find default system paths
    #
    # @api private
    # @example
    #   search_paths("/usr/local/bin:/bin")
    #   # => ["/bin"]
    # @param path [String] the path to search through
    # @return [Array<String>] the array of paths to search
    #
    # source://tty-which//lib/tty/which.rb#81
    def search_paths(path = T.unsafe(nil)); end

    # Find an executable in a platform independent way
    #
    # @api public
    # @example
    #   which("ruby")                 # => "/usr/local/bin/ruby"
    #   which("/usr/local/bin/ruby")  # => "/usr/local/bin/ruby"
    #   which("foo")                  # => nil
    # @example
    #   which("ruby", paths: ["/usr/locale/bin", "/usr/bin", "/bin"])
    # @param cmd [String] the command to search for
    # @param paths [Array<String>] the paths to look through
    # @return [String, nil] the absolute path to executable if found, `nil` otherwise
    #
    # source://tty-which//lib/tty/which.rb#27
    def which(cmd, paths: T.unsafe(nil)); end
  end
end

# source://tty-which//lib/tty/which/version.rb#5
TTY::Which::VERSION = T.let(T.unsafe(nil), String)
