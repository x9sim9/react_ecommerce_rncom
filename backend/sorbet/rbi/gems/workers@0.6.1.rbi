# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `workers` gem.
# Please instead update this file by running `bin/tapioca gem workers`.

# source://workers//lib/workers/version.rb#1
module Workers
  class << self
    # source://workers//lib/workers.rb#52
    def lock(&block); end

    # source://workers//lib/workers.rb#46
    def map(inputs, options = T.unsafe(nil), &block); end

    # source://workers//lib/workers.rb#20
    def pool; end

    # source://workers//lib/workers.rb#26
    def pool=(val); end

    # source://workers//lib/workers.rb#33
    def scheduler; end

    # source://workers//lib/workers.rb#39
    def scheduler=(val); end
  end
end

# source://workers//lib/workers/bucket_scheduler.rb#2
class Workers::BucketScheduler
  # @return [BucketScheduler] a new instance of BucketScheduler
  #
  # source://workers//lib/workers/bucket_scheduler.rb#6
  def initialize(options = T.unsafe(nil)); end

  # source://workers//lib/workers/bucket_scheduler.rb#36
  def dispose; end

  # source://workers//lib/workers/bucket_scheduler.rb#18
  def schedule(timer); end

  # source://workers//lib/workers/bucket_scheduler.rb#24
  def unschedule(timer); end

  # source://workers//lib/workers/bucket_scheduler.rb#30
  def wakeup; end
end

# source://workers//lib/workers/bucket_scheduler.rb#3
Workers::BucketScheduler::DEFAULT_BUCKET_SIZE = T.let(T.unsafe(nil), Integer)

# source://workers//lib/workers/bucket_scheduler.rb#4
Workers::BucketScheduler::DEFAULT_POOL_SIZE = T.let(T.unsafe(nil), Integer)

# source://workers//lib/workers/event.rb#2
class Workers::Event
  # @return [Event] a new instance of Event
  #
  # source://workers//lib/workers/event.rb#6
  def initialize(command, data); end

  # Returns the value of attribute command.
  #
  # source://workers//lib/workers/event.rb#3
  def command; end

  # Sets the attribute command
  #
  # @param value the value to set the attribute command to.
  #
  # source://workers//lib/workers/event.rb#3
  def command=(_arg0); end

  # Returns the value of attribute data.
  #
  # source://workers//lib/workers/event.rb#4
  def data; end

  # Sets the attribute data
  #
  # @param value the value to set the attribute data to.
  #
  # source://workers//lib/workers/event.rb#4
  def data=(_arg0); end
end

# source://workers//lib/workers/exceptions.rb#5
class Workers::FailedTaskError < ::Workers::WorkersError; end

# source://workers//lib/workers/helpers.rb#2
module Workers::Helpers
  # source://workers//lib/workers/helpers.rb#19
  def concat_e(msg, e = T.unsafe(nil)); end

  # source://workers//lib/workers/helpers.rb#3
  def log_debug(msg, e = T.unsafe(nil)); end

  # source://workers//lib/workers/helpers.rb#15
  def log_error(msg, e = T.unsafe(nil)); end

  # source://workers//lib/workers/helpers.rb#7
  def log_info(msg, e = T.unsafe(nil)); end

  # source://workers//lib/workers/helpers.rb#11
  def log_warn(msg, e = T.unsafe(nil)); end
end

# source://workers//lib/workers/exceptions.rb#6
class Workers::InvalidStateError < ::Workers::WorkersError; end

# source://workers//lib/workers/exceptions.rb#4
class Workers::JoinError < ::Workers::WorkersError; end

# source://workers//lib/workers/log_proxy.rb#2
class Workers::LogProxy
  # @return [LogProxy] a new instance of LogProxy
  #
  # source://workers//lib/workers/log_proxy.rb#5
  def initialize(logger); end

  # source://workers//lib/workers/log_proxy.rb#11
  def debug(msg); end

  # source://workers//lib/workers/log_proxy.rb#29
  def error(msg); end

  # source://workers//lib/workers/log_proxy.rb#17
  def info(msg); end

  # Returns the value of attribute logger.
  #
  # source://workers//lib/workers/log_proxy.rb#3
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://workers//lib/workers/log_proxy.rb#3
  def logger=(_arg0); end

  # source://workers//lib/workers/log_proxy.rb#23
  def warn(msg); end
end

# source://workers//lib/workers/exceptions.rb#7
class Workers::MaxTriesError < ::Workers::WorkersError; end

# source://workers//lib/workers/exceptions.rb#8
class Workers::MissingCallbackError < ::Workers::WorkersError; end

# source://workers//lib/workers/periodic_timer.rb#2
class Workers::PeriodicTimer < ::Workers::Timer
  # @return [PeriodicTimer] a new instance of PeriodicTimer
  #
  # source://workers//lib/workers/periodic_timer.rb#3
  def initialize(delay, options = T.unsafe(nil), &block); end
end

# source://workers//lib/workers/pool.rb#2
class Workers::Pool
  include ::Workers::Helpers

  # @return [Pool] a new instance of Pool
  #
  # source://workers//lib/workers/pool.rb#9
  def initialize(options = T.unsafe(nil)); end

  # source://workers//lib/workers/pool.rb#83
  def contract(count, &block); end

  # source://workers//lib/workers/pool.rb#53
  def dispose(max_wait = T.unsafe(nil), &block); end

  # source://workers//lib/workers/pool.rb#23
  def enqueue(command, data = T.unsafe(nil)); end

  # source://workers//lib/workers/pool.rb#71
  def expand(count); end

  # source://workers//lib/workers/pool.rb#61
  def inspect; end

  # source://workers//lib/workers/pool.rb#45
  def join(max_wait = T.unsafe(nil)); end

  # Returns the value of attribute on_exception.
  #
  # source://workers//lib/workers/pool.rb#7
  def on_exception; end

  # Sets the attribute on_exception
  #
  # @param value the value to set the attribute on_exception to.
  #
  # source://workers//lib/workers/pool.rb#7
  def on_exception=(_arg0); end

  # source://workers//lib/workers/pool.rb#29
  def perform(&block); end

  # source://workers//lib/workers/pool.rb#101
  def resize(new_size); end

  # source://workers//lib/workers/pool.rb#35
  def shutdown(&block); end

  # source://workers//lib/workers/pool.rb#65
  def size; end

  private

  # source://workers//lib/workers/pool.rb#115
  def remove_worker(worker); end
end

# source://workers//lib/workers/pool.rb#5
Workers::Pool::DEFAULT_POOL_SIZE = T.let(T.unsafe(nil), Integer)

# source://workers//lib/workers/exceptions.rb#9
class Workers::PoolSizeError < ::Workers::WorkersError; end

# source://workers//lib/workers/scheduler.rb#2
class Workers::Scheduler
  include ::Workers::Helpers

  # @return [Scheduler] a new instance of Scheduler
  #
  # source://workers//lib/workers/scheduler.rb#5
  def initialize(options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://workers//lib/workers/scheduler.rb#49
  def alive?; end

  # source://workers//lib/workers/scheduler.rb#39
  def dispose; end

  # source://workers//lib/workers/scheduler.rb#15
  def schedule(timer); end

  # source://workers//lib/workers/scheduler.rb#25
  def unschedule(timer); end

  # source://workers//lib/workers/scheduler.rb#33
  def wakeup; end

  private

  # source://workers//lib/workers/scheduler.rb#90
  def next_delay; end

  # source://workers//lib/workers/scheduler.rb#70
  def process_overdue; end

  # source://workers//lib/workers/scheduler.rb#55
  def start_loop; end
end

# source://workers//lib/workers/task.rb#2
class Workers::Task
  include ::Workers::Helpers

  # @raise [Workers::MaxTriesError]
  # @return [Task] a new instance of Task
  #
  # source://workers//lib/workers/task.rb#12
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute exception.
  #
  # source://workers//lib/workers/task.rb#7
  def exception; end

  # @return [Boolean]
  #
  # source://workers//lib/workers/task.rb#53
  def failed?; end

  # Returns the value of attribute input.
  #
  # source://workers//lib/workers/task.rb#5
  def input; end

  # Returns the value of attribute max_tries.
  #
  # source://workers//lib/workers/task.rb#9
  def max_tries; end

  # Returns the value of attribute result.
  #
  # source://workers//lib/workers/task.rb#6
  def result; end

  # @raise [Workers::InvalidStateError]
  #
  # source://workers//lib/workers/task.rb#26
  def run; end

  # Returns the value of attribute state.
  #
  # source://workers//lib/workers/task.rb#8
  def state; end

  # @return [Boolean]
  #
  # source://workers//lib/workers/task.rb#49
  def succeeded?; end

  # Returns the value of attribute tries.
  #
  # source://workers//lib/workers/task.rb#10
  def tries; end
end

# source://workers//lib/workers/task_group.rb#2
class Workers::TaskGroup
  include ::Workers::Helpers

  # @return [TaskGroup] a new instance of TaskGroup
  #
  # source://workers//lib/workers/task_group.rb#8
  def initialize(options = T.unsafe(nil)); end

  # source://workers//lib/workers/task_group.rb#21
  def add(options = T.unsafe(nil), &block); end

  # source://workers//lib/workers/task_group.rb#61
  def failures; end

  # source://workers//lib/workers/task_group.rb#65
  def map(inputs, options = T.unsafe(nil), &block); end

  # source://workers//lib/workers/task_group.rb#32
  def run; end

  # Returns the value of attribute state.
  #
  # source://workers//lib/workers/task_group.rb#5
  def state; end

  # source://workers//lib/workers/task_group.rb#57
  def successes; end

  # Convenient mutex to be used by a users's task code that needs serializing.
  # This should NEVER be used by TaskGroup code (use the @internal_lock instead);
  #
  # source://workers//lib/workers/task_group.rb#88
  def synchronize(&block); end

  # Returns the value of attribute tasks.
  #
  # source://workers//lib/workers/task_group.rb#6
  def tasks; end

  private

  # @return [Boolean]
  #
  # source://workers//lib/workers/task_group.rb#113
  def all_tasks_finished?; end

  # source://workers//lib/workers/task_group.rb#104
  def finished(task); end

  # source://workers//lib/workers/task_group.rb#96
  def state!(*args); end
end

# source://workers//lib/workers/timer.rb#2
class Workers::Timer
  include ::Workers::Helpers

  # @return [Timer] a new instance of Timer
  #
  # source://workers//lib/workers/timer.rb#8
  def initialize(delay, options = T.unsafe(nil), &block); end

  # source://workers//lib/workers/timer.rb#22
  def <=>(other); end

  # source://workers//lib/workers/timer.rb#45
  def cancel; end

  # Returns the value of attribute delay.
  #
  # source://workers//lib/workers/timer.rb#5
  def delay; end

  # source://workers//lib/workers/timer.rb#37
  def fire; end

  # @return [Boolean]
  #
  # source://workers//lib/workers/timer.rb#33
  def overdue?; end

  # Returns the value of attribute repeat.
  #
  # source://workers//lib/workers/timer.rb#6
  def repeat; end

  # source://workers//lib/workers/timer.rb#51
  def reset; end

  # source://workers//lib/workers/timer.rb#26
  def sec_remaining; end
end

# source://workers//lib/workers/exceptions.rb#3
class Workers::UnknownEventError < ::Workers::WorkersError; end

# source://workers//lib/workers/version.rb#2
Workers::VERSION = T.let(T.unsafe(nil), String)

# source://workers//lib/workers/worker.rb#2
class Workers::Worker
  include ::Workers::Helpers

  # @return [Worker] a new instance of Worker
  #
  # source://workers//lib/workers/worker.rb#8
  def initialize(options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://workers//lib/workers/worker.rb#55
  def alive?; end

  # source://workers//lib/workers/worker.rb#50
  def dispose(max_wait = T.unsafe(nil)); end

  # source://workers//lib/workers/worker.rb#18
  def enqueue(command, data = T.unsafe(nil)); end

  # Returns the value of attribute exception.
  #
  # source://workers//lib/workers/worker.rb#5
  def exception; end

  # Sets the attribute exception
  #
  # @param value the value to set the attribute exception to.
  #
  # source://workers//lib/workers/worker.rb#5
  def exception=(_arg0); end

  # source://workers//lib/workers/worker.rb#59
  def inspect; end

  # @raise [Workers::JoinError]
  #
  # source://workers//lib/workers/worker.rb#42
  def join(max_wait = T.unsafe(nil)); end

  # source://workers//lib/workers/worker.rb#36
  def kill; end

  # Returns the value of attribute on_exception.
  #
  # source://workers//lib/workers/worker.rb#6
  def on_exception; end

  # Sets the attribute on_exception
  #
  # @param value the value to set the attribute on_exception to.
  #
  # source://workers//lib/workers/worker.rb#6
  def on_exception=(_arg0); end

  # source://workers//lib/workers/worker.rb#24
  def perform(&block); end

  # source://workers//lib/workers/worker.rb#30
  def shutdown(&block); end

  private

  # Override this method to handle custom events.
  # Make sure you call super(event) if want to built-in events to work.
  #
  # source://workers//lib/workers/worker.rb#80
  def event_handler(event); end

  # source://workers//lib/workers/worker.rb#106
  def exception_handler(e); end

  # source://workers//lib/workers/worker.rb#100
  def perform_handler(event); end

  # source://workers//lib/workers/worker.rb#71
  def process_event; end

  # source://workers//lib/workers/worker.rb#94
  def shutdown_handler(event); end

  # source://workers//lib/workers/worker.rb#65
  def start_event_loop; end
end

# source://workers//lib/workers/exceptions.rb#2
class Workers::WorkersError < ::RuntimeError; end
